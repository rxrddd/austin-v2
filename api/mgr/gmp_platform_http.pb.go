// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.19.4
// source: api/mgr/gmp_platform.proto

package mgr

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGmpPlatformGetAllChannel = "/api.gvs_mgr.GmpPlatform/GetAllChannel"
const OperationGmpPlatformGetMsgRecord = "/api.gvs_mgr.GmpPlatform/GetMsgRecord"
const OperationGmpPlatformGetOfficialAccountTemplateList = "/api.gvs_mgr.GmpPlatform/GetOfficialAccountTemplateList"
const OperationGmpPlatformGetSmsRecord = "/api.gvs_mgr.GmpPlatform/GetSmsRecord"
const OperationGmpPlatformSendAccountChangeStatus = "/api.gvs_mgr.GmpPlatform/SendAccountChangeStatus"
const OperationGmpPlatformSendAccountEdit = "/api.gvs_mgr.GmpPlatform/SendAccountEdit"
const OperationGmpPlatformSendAccountList = "/api.gvs_mgr.GmpPlatform/SendAccountList"
const OperationGmpPlatformSendAccountQuery = "/api.gvs_mgr.GmpPlatform/SendAccountQuery"
const OperationGmpPlatformTemplateChangeStatus = "/api.gvs_mgr.GmpPlatform/TemplateChangeStatus"
const OperationGmpPlatformTemplateEdit = "/api.gvs_mgr.GmpPlatform/TemplateEdit"
const OperationGmpPlatformTemplateList = "/api.gvs_mgr.GmpPlatform/TemplateList"
const OperationGmpPlatformTemplateOne = "/api.gvs_mgr.GmpPlatform/TemplateOne"
const OperationGmpPlatformTemplateRemove = "/api.gvs_mgr.GmpPlatform/TemplateRemove"

type GmpPlatformHTTPServer interface {
	// GetAllChannel获取所有支持的渠道
	GetAllChannel(context.Context, *emptypb.Empty) (*GetAllChannelResp, error)
	// GetMsgRecord消息记录列表
	GetMsgRecord(context.Context, *MsgRecordRequest) (*MsgRecordResp, error)
	// GetOfficialAccountTemplateList获取微信小程序下拉模板
	GetOfficialAccountTemplateList(context.Context, *OfficialAccountTemplateRequest) (*OfficialAccountTemplateResp, error)
	// GetSmsRecord短信记录列表
	GetSmsRecord(context.Context, *SmsRecordRequest) (*SmsRecordResp, error)
	// SendAccountChangeStatus禁用/启用
	SendAccountChangeStatus(context.Context, *SendAccountChangeStatusRequest) (*emptypb.Empty, error)
	// SendAccountEdit新增/修改账号
	SendAccountEdit(context.Context, *SendAccountEditRequest) (*emptypb.Empty, error)
	// SendAccountList账号列表
	SendAccountList(context.Context, *SendAccountListRequest) (*SendAccountListResp, error)
	// SendAccountQuery账号获取下拉
	SendAccountQuery(context.Context, *SendAccountListRequest) (*SendAccountQueryResp, error)
	// TemplateChangeStatus禁用/启用
	TemplateChangeStatus(context.Context, *TemplateChangeStatusRequest) (*emptypb.Empty, error)
	// TemplateEdit新增/修改模板
	TemplateEdit(context.Context, *TemplateEditRequest) (*emptypb.Empty, error)
	// TemplateList模板列表
	TemplateList(context.Context, *TemplateListRequest) (*TemplateListResp, error)
	// TemplateOne删除模板
	TemplateOne(context.Context, *TemplateOneRequest) (*TemplateOneResp, error)
	// TemplateRemove删除模板
	TemplateRemove(context.Context, *TemplateRemoveRequest) (*emptypb.Empty, error)
}

func RegisterGmpPlatformHTTPServer(s *http.Server, srv GmpPlatformHTTPServer) {
	r := s.Route("/")
	r.POST("/gmp_platform/sendAccount/edit", _GmpPlatform_SendAccountEdit0_HTTP_Handler(srv))
	r.POST("/gmp_platform/sendAccount/changeStatus", _GmpPlatform_SendAccountChangeStatus0_HTTP_Handler(srv))
	r.GET("/gmp_platform/sendAccount/list", _GmpPlatform_SendAccountList0_HTTP_Handler(srv))
	r.GET("/gmp_platform/sendAccount/query", _GmpPlatform_SendAccountQuery0_HTTP_Handler(srv))
	r.POST("/gmp_platform/template/edit", _GmpPlatform_TemplateEdit0_HTTP_Handler(srv))
	r.POST("/gmp_platform/template/changeStatus", _GmpPlatform_TemplateChangeStatus0_HTTP_Handler(srv))
	r.GET("/gmp_platform/template/list", _GmpPlatform_TemplateList0_HTTP_Handler(srv))
	r.POST("/gmp_platform/template/remove", _GmpPlatform_TemplateRemove0_HTTP_Handler(srv))
	r.GET("/gmp_platform/template/one", _GmpPlatform_TemplateOne0_HTTP_Handler(srv))
	r.GET("/gmp_platform/sms/getAllChannel", _GmpPlatform_GetAllChannel0_HTTP_Handler(srv))
	r.GET("/gmp_platform/sms/record", _GmpPlatform_GetSmsRecord0_HTTP_Handler(srv))
	r.GET("/gmp_platform/msg/record", _GmpPlatform_GetMsgRecord0_HTTP_Handler(srv))
	r.GET("/gmp_platform/wxTemplate/getOfficialAccountTemplateList", _GmpPlatform_GetOfficialAccountTemplateList0_HTTP_Handler(srv))
}

func _GmpPlatform_SendAccountEdit0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendAccountEditRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformSendAccountEdit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendAccountEdit(ctx, req.(*SendAccountEditRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_SendAccountChangeStatus0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendAccountChangeStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformSendAccountChangeStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendAccountChangeStatus(ctx, req.(*SendAccountChangeStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_SendAccountList0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendAccountListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformSendAccountList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendAccountList(ctx, req.(*SendAccountListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendAccountListResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_SendAccountQuery0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendAccountListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformSendAccountQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendAccountQuery(ctx, req.(*SendAccountListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendAccountQueryResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_TemplateEdit0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TemplateEditRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformTemplateEdit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateEdit(ctx, req.(*TemplateEditRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_TemplateChangeStatus0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TemplateChangeStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformTemplateChangeStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateChangeStatus(ctx, req.(*TemplateChangeStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_TemplateList0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TemplateListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformTemplateList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateList(ctx, req.(*TemplateListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TemplateListResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_TemplateRemove0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TemplateRemoveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformTemplateRemove)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateRemove(ctx, req.(*TemplateRemoveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_TemplateOne0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TemplateOneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformTemplateOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TemplateOne(ctx, req.(*TemplateOneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TemplateOneResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_GetAllChannel0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformGetAllChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllChannel(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllChannelResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_GetSmsRecord0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SmsRecordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformGetSmsRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSmsRecord(ctx, req.(*SmsRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SmsRecordResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_GetMsgRecord0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MsgRecordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformGetMsgRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMsgRecord(ctx, req.(*MsgRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MsgRecordResp)
		return ctx.Result(200, reply)
	}
}

func _GmpPlatform_GetOfficialAccountTemplateList0_HTTP_Handler(srv GmpPlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OfficialAccountTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGmpPlatformGetOfficialAccountTemplateList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOfficialAccountTemplateList(ctx, req.(*OfficialAccountTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OfficialAccountTemplateResp)
		return ctx.Result(200, reply)
	}
}

type GmpPlatformHTTPClient interface {
	GetAllChannel(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetAllChannelResp, err error)
	GetMsgRecord(ctx context.Context, req *MsgRecordRequest, opts ...http.CallOption) (rsp *MsgRecordResp, err error)
	GetOfficialAccountTemplateList(ctx context.Context, req *OfficialAccountTemplateRequest, opts ...http.CallOption) (rsp *OfficialAccountTemplateResp, err error)
	GetSmsRecord(ctx context.Context, req *SmsRecordRequest, opts ...http.CallOption) (rsp *SmsRecordResp, err error)
	SendAccountChangeStatus(ctx context.Context, req *SendAccountChangeStatusRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendAccountEdit(ctx context.Context, req *SendAccountEditRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SendAccountList(ctx context.Context, req *SendAccountListRequest, opts ...http.CallOption) (rsp *SendAccountListResp, err error)
	SendAccountQuery(ctx context.Context, req *SendAccountListRequest, opts ...http.CallOption) (rsp *SendAccountQueryResp, err error)
	TemplateChangeStatus(ctx context.Context, req *TemplateChangeStatusRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	TemplateEdit(ctx context.Context, req *TemplateEditRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	TemplateList(ctx context.Context, req *TemplateListRequest, opts ...http.CallOption) (rsp *TemplateListResp, err error)
	TemplateOne(ctx context.Context, req *TemplateOneRequest, opts ...http.CallOption) (rsp *TemplateOneResp, err error)
	TemplateRemove(ctx context.Context, req *TemplateRemoveRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type GmpPlatformHTTPClientImpl struct {
	cc *http.Client
}

func NewGmpPlatformHTTPClient(client *http.Client) GmpPlatformHTTPClient {
	return &GmpPlatformHTTPClientImpl{client}
}

func (c *GmpPlatformHTTPClientImpl) GetAllChannel(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetAllChannelResp, error) {
	var out GetAllChannelResp
	pattern := "/gmp_platform/sms/getAllChannel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformGetAllChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) GetMsgRecord(ctx context.Context, in *MsgRecordRequest, opts ...http.CallOption) (*MsgRecordResp, error) {
	var out MsgRecordResp
	pattern := "/gmp_platform/msg/record"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformGetMsgRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) GetOfficialAccountTemplateList(ctx context.Context, in *OfficialAccountTemplateRequest, opts ...http.CallOption) (*OfficialAccountTemplateResp, error) {
	var out OfficialAccountTemplateResp
	pattern := "/gmp_platform/wxTemplate/getOfficialAccountTemplateList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformGetOfficialAccountTemplateList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) GetSmsRecord(ctx context.Context, in *SmsRecordRequest, opts ...http.CallOption) (*SmsRecordResp, error) {
	var out SmsRecordResp
	pattern := "/gmp_platform/sms/record"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformGetSmsRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) SendAccountChangeStatus(ctx context.Context, in *SendAccountChangeStatusRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gmp_platform/sendAccount/changeStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGmpPlatformSendAccountChangeStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) SendAccountEdit(ctx context.Context, in *SendAccountEditRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gmp_platform/sendAccount/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGmpPlatformSendAccountEdit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) SendAccountList(ctx context.Context, in *SendAccountListRequest, opts ...http.CallOption) (*SendAccountListResp, error) {
	var out SendAccountListResp
	pattern := "/gmp_platform/sendAccount/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformSendAccountList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) SendAccountQuery(ctx context.Context, in *SendAccountListRequest, opts ...http.CallOption) (*SendAccountQueryResp, error) {
	var out SendAccountQueryResp
	pattern := "/gmp_platform/sendAccount/query"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformSendAccountQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) TemplateChangeStatus(ctx context.Context, in *TemplateChangeStatusRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gmp_platform/template/changeStatus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGmpPlatformTemplateChangeStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) TemplateEdit(ctx context.Context, in *TemplateEditRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gmp_platform/template/edit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGmpPlatformTemplateEdit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) TemplateList(ctx context.Context, in *TemplateListRequest, opts ...http.CallOption) (*TemplateListResp, error) {
	var out TemplateListResp
	pattern := "/gmp_platform/template/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformTemplateList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) TemplateOne(ctx context.Context, in *TemplateOneRequest, opts ...http.CallOption) (*TemplateOneResp, error) {
	var out TemplateOneResp
	pattern := "/gmp_platform/template/one"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGmpPlatformTemplateOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GmpPlatformHTTPClientImpl) TemplateRemove(ctx context.Context, in *TemplateRemoveRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/gmp_platform/template/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGmpPlatformTemplateRemove))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
