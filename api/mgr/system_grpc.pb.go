// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/mgr/system.proto

package mgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	System_AdminLogin_FullMethodName       = "/api.gvs_mgr.System/AdminLogin"
	System_AdminLogout_FullMethodName      = "/api.gvs_mgr.System/AdminLogout"
	System_GetSelfInfo_FullMethodName      = "/api.gvs_mgr.System/GetSelfInfo"
	System_GetMenuRoute_FullMethodName     = "/api.gvs_mgr.System/GetMenuRoute"
	System_GetMenuAllList_FullMethodName   = "/api.gvs_mgr.System/GetMenuAllList"
	System_SaveMenu_FullMethodName         = "/api.gvs_mgr.System/SaveMenu"
	System_DeleteMenu_FullMethodName       = "/api.gvs_mgr.System/DeleteMenu"
	System_RoleList_FullMethodName         = "/api.gvs_mgr.System/RoleList"
	System_RoleAll_FullMethodName          = "/api.gvs_mgr.System/RoleAll"
	System_SaveRole_FullMethodName         = "/api.gvs_mgr.System/SaveRole"
	System_ChangeRoleStatus_FullMethodName = "/api.gvs_mgr.System/ChangeRoleStatus"
	System_RoleDetail_FullMethodName       = "/api.gvs_mgr.System/RoleDetail"
	System_AdminList_FullMethodName        = "/api.gvs_mgr.System/AdminList"
	System_AdminDetail_FullMethodName      = "/api.gvs_mgr.System/AdminDetail"
	System_AdminSave_FullMethodName        = "/api.gvs_mgr.System/AdminSave"
	System_AdminDisable_FullMethodName     = "/api.gvs_mgr.System/AdminDisable"
	System_UpdateInfo_FullMethodName       = "/api.gvs_mgr.System/UpdateInfo"
)

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	AdminLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	AdminLogout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSelfInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelfReply, error)
	GetMenuRoute(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuRouteReply, error)
	GetMenuAllList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuRouteReply, error)
	SaveMenu(ctx context.Context, in *SaveMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListReply, error)
	RoleAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoleAllReply, error)
	SaveRole(ctx context.Context, in *SaveRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeRoleStatus(ctx context.Context, in *ChangeRoleStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RoleDetail(ctx context.Context, in *RoleDetailReq, opts ...grpc.CallOption) (*RoleDetailReply, error)
	AdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*AdminListReply, error)
	AdminDetail(ctx context.Context, in *AdminDetailReq, opts ...grpc.CallOption) (*AdminDetailReply, error)
	AdminSave(ctx context.Context, in *AdminSaveReq, opts ...grpc.CallOption) (*AdminSaveReply, error)
	AdminDisable(ctx context.Context, in *AdminDisableReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) AdminLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, System_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AdminLogout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_AdminLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetSelfInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelfReply, error) {
	out := new(SelfReply)
	err := c.cc.Invoke(ctx, System_GetSelfInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetMenuRoute(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuRouteReply, error) {
	out := new(GetMenuRouteReply)
	err := c.cc.Invoke(ctx, System_GetMenuRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) GetMenuAllList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuRouteReply, error) {
	out := new(GetMenuRouteReply)
	err := c.cc.Invoke(ctx, System_GetMenuAllList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SaveMenu(ctx context.Context, in *SaveMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_SaveMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_DeleteMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListReply, error) {
	out := new(RoleListReply)
	err := c.cc.Invoke(ctx, System_RoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RoleAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RoleAllReply, error) {
	out := new(RoleAllReply)
	err := c.cc.Invoke(ctx, System_RoleAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SaveRole(ctx context.Context, in *SaveRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_SaveRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ChangeRoleStatus(ctx context.Context, in *ChangeRoleStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_ChangeRoleStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) RoleDetail(ctx context.Context, in *RoleDetailReq, opts ...grpc.CallOption) (*RoleDetailReply, error) {
	out := new(RoleDetailReply)
	err := c.cc.Invoke(ctx, System_RoleDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AdminList(ctx context.Context, in *AdminListReq, opts ...grpc.CallOption) (*AdminListReply, error) {
	out := new(AdminListReply)
	err := c.cc.Invoke(ctx, System_AdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AdminDetail(ctx context.Context, in *AdminDetailReq, opts ...grpc.CallOption) (*AdminDetailReply, error) {
	out := new(AdminDetailReply)
	err := c.cc.Invoke(ctx, System_AdminDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AdminSave(ctx context.Context, in *AdminSaveReq, opts ...grpc.CallOption) (*AdminSaveReply, error) {
	out := new(AdminSaveReply)
	err := c.cc.Invoke(ctx, System_AdminSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) AdminDisable(ctx context.Context, in *AdminDisableReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_AdminDisable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, System_UpdateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility
type SystemServer interface {
	AdminLogin(context.Context, *LoginReq) (*LoginResp, error)
	AdminLogout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetSelfInfo(context.Context, *emptypb.Empty) (*SelfReply, error)
	GetMenuRoute(context.Context, *emptypb.Empty) (*GetMenuRouteReply, error)
	GetMenuAllList(context.Context, *emptypb.Empty) (*GetMenuRouteReply, error)
	SaveMenu(context.Context, *SaveMenuReq) (*emptypb.Empty, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*emptypb.Empty, error)
	RoleList(context.Context, *RoleListReq) (*RoleListReply, error)
	RoleAll(context.Context, *emptypb.Empty) (*RoleAllReply, error)
	SaveRole(context.Context, *SaveRoleReq) (*emptypb.Empty, error)
	ChangeRoleStatus(context.Context, *ChangeRoleStatusReq) (*emptypb.Empty, error)
	RoleDetail(context.Context, *RoleDetailReq) (*RoleDetailReply, error)
	AdminList(context.Context, *AdminListReq) (*AdminListReply, error)
	AdminDetail(context.Context, *AdminDetailReq) (*AdminDetailReply, error)
	AdminSave(context.Context, *AdminSaveReq) (*AdminSaveReply, error)
	AdminDisable(context.Context, *AdminDisableReq) (*emptypb.Empty, error)
	UpdateInfo(context.Context, *UpdateInfoReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (UnimplementedSystemServer) AdminLogin(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedSystemServer) AdminLogout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogout not implemented")
}
func (UnimplementedSystemServer) GetSelfInfo(context.Context, *emptypb.Empty) (*SelfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfInfo not implemented")
}
func (UnimplementedSystemServer) GetMenuRoute(context.Context, *emptypb.Empty) (*GetMenuRouteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuRoute not implemented")
}
func (UnimplementedSystemServer) GetMenuAllList(context.Context, *emptypb.Empty) (*GetMenuRouteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAllList not implemented")
}
func (UnimplementedSystemServer) SaveMenu(context.Context, *SaveMenuReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMenu not implemented")
}
func (UnimplementedSystemServer) DeleteMenu(context.Context, *DeleteMenuReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedSystemServer) RoleList(context.Context, *RoleListReq) (*RoleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedSystemServer) RoleAll(context.Context, *emptypb.Empty) (*RoleAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAll not implemented")
}
func (UnimplementedSystemServer) SaveRole(context.Context, *SaveRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRole not implemented")
}
func (UnimplementedSystemServer) ChangeRoleStatus(context.Context, *ChangeRoleStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoleStatus not implemented")
}
func (UnimplementedSystemServer) RoleDetail(context.Context, *RoleDetailReq) (*RoleDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDetail not implemented")
}
func (UnimplementedSystemServer) AdminList(context.Context, *AdminListReq) (*AdminListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminList not implemented")
}
func (UnimplementedSystemServer) AdminDetail(context.Context, *AdminDetailReq) (*AdminDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDetail not implemented")
}
func (UnimplementedSystemServer) AdminSave(context.Context, *AdminSaveReq) (*AdminSaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSave not implemented")
}
func (UnimplementedSystemServer) AdminDisable(context.Context, *AdminDisableReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDisable not implemented")
}
func (UnimplementedSystemServer) UpdateInfo(context.Context, *UpdateInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AdminLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AdminLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AdminLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AdminLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AdminLogout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetSelfInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetSelfInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetSelfInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetSelfInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetMenuRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetMenuRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetMenuRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetMenuRoute(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_GetMenuAllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).GetMenuAllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_GetMenuAllList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).GetMenuAllList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SaveMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SaveMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_SaveMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SaveMenu(ctx, req.(*SaveMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_DeleteMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RoleAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RoleAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_RoleAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RoleAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SaveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SaveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_SaveRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SaveRole(ctx, req.(*SaveRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ChangeRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ChangeRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_ChangeRoleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ChangeRoleStatus(ctx, req.(*ChangeRoleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_RoleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RoleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_RoleDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RoleDetail(ctx, req.(*RoleDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AdminList(ctx, req.(*AdminListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AdminDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AdminDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AdminDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AdminDetail(ctx, req.(*AdminDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AdminSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AdminSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AdminSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AdminSave(ctx, req.(*AdminSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_AdminDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDisableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AdminDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AdminDisable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AdminDisable(ctx, req.(*AdminDisableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateInfo(ctx, req.(*UpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gvs_mgr.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _System_AdminLogin_Handler,
		},
		{
			MethodName: "AdminLogout",
			Handler:    _System_AdminLogout_Handler,
		},
		{
			MethodName: "GetSelfInfo",
			Handler:    _System_GetSelfInfo_Handler,
		},
		{
			MethodName: "GetMenuRoute",
			Handler:    _System_GetMenuRoute_Handler,
		},
		{
			MethodName: "GetMenuAllList",
			Handler:    _System_GetMenuAllList_Handler,
		},
		{
			MethodName: "SaveMenu",
			Handler:    _System_SaveMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _System_DeleteMenu_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _System_RoleList_Handler,
		},
		{
			MethodName: "RoleAll",
			Handler:    _System_RoleAll_Handler,
		},
		{
			MethodName: "SaveRole",
			Handler:    _System_SaveRole_Handler,
		},
		{
			MethodName: "ChangeRoleStatus",
			Handler:    _System_ChangeRoleStatus_Handler,
		},
		{
			MethodName: "RoleDetail",
			Handler:    _System_RoleDetail_Handler,
		},
		{
			MethodName: "AdminList",
			Handler:    _System_AdminList_Handler,
		},
		{
			MethodName: "AdminDetail",
			Handler:    _System_AdminDetail_Handler,
		},
		{
			MethodName: "AdminSave",
			Handler:    _System_AdminSave_Handler,
		},
		{
			MethodName: "AdminDisable",
			Handler:    _System_AdminDisable_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _System_UpdateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mgr/system.proto",
}
