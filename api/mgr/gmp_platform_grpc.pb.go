// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/mgr/gmp_platform.proto

package mgr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GmpPlatform_SendAccountEdit_FullMethodName                = "/api.gvs_mgr.GmpPlatform/SendAccountEdit"
	GmpPlatform_SendAccountChangeStatus_FullMethodName        = "/api.gvs_mgr.GmpPlatform/SendAccountChangeStatus"
	GmpPlatform_SendAccountList_FullMethodName                = "/api.gvs_mgr.GmpPlatform/SendAccountList"
	GmpPlatform_SendAccountQuery_FullMethodName               = "/api.gvs_mgr.GmpPlatform/SendAccountQuery"
	GmpPlatform_TemplateEdit_FullMethodName                   = "/api.gvs_mgr.GmpPlatform/TemplateEdit"
	GmpPlatform_TemplateChangeStatus_FullMethodName           = "/api.gvs_mgr.GmpPlatform/TemplateChangeStatus"
	GmpPlatform_TemplateList_FullMethodName                   = "/api.gvs_mgr.GmpPlatform/TemplateList"
	GmpPlatform_TemplateRemove_FullMethodName                 = "/api.gvs_mgr.GmpPlatform/TemplateRemove"
	GmpPlatform_TemplateOne_FullMethodName                    = "/api.gvs_mgr.GmpPlatform/TemplateOne"
	GmpPlatform_GetAllChannel_FullMethodName                  = "/api.gvs_mgr.GmpPlatform/GetAllChannel"
	GmpPlatform_GetSmsRecord_FullMethodName                   = "/api.gvs_mgr.GmpPlatform/GetSmsRecord"
	GmpPlatform_GetMsgRecord_FullMethodName                   = "/api.gvs_mgr.GmpPlatform/GetMsgRecord"
	GmpPlatform_GetOfficialAccountTemplateList_FullMethodName = "/api.gvs_mgr.GmpPlatform/GetOfficialAccountTemplateList"
)

// GmpPlatformClient is the client API for GmpPlatform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GmpPlatformClient interface {
	//新增/修改账号
	SendAccountEdit(ctx context.Context, in *SendAccountEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//禁用/启用
	SendAccountChangeStatus(ctx context.Context, in *SendAccountChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//账号列表
	SendAccountList(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountListResp, error)
	//账号获取下拉
	SendAccountQuery(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountQueryResp, error)
	//新增/修改模板
	TemplateEdit(ctx context.Context, in *TemplateEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//禁用/启用
	TemplateChangeStatus(ctx context.Context, in *TemplateChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//模板列表
	TemplateList(ctx context.Context, in *TemplateListRequest, opts ...grpc.CallOption) (*TemplateListResp, error)
	//删除模板
	TemplateRemove(ctx context.Context, in *TemplateRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//删除模板
	TemplateOne(ctx context.Context, in *TemplateOneRequest, opts ...grpc.CallOption) (*TemplateOneResp, error)
	//获取所有支持的渠道
	GetAllChannel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllChannelResp, error)
	//短信记录列表
	GetSmsRecord(ctx context.Context, in *SmsRecordRequest, opts ...grpc.CallOption) (*SmsRecordResp, error)
	//消息记录列表
	GetMsgRecord(ctx context.Context, in *MsgRecordRequest, opts ...grpc.CallOption) (*MsgRecordResp, error)
	//获取微信小程序下拉模板
	GetOfficialAccountTemplateList(ctx context.Context, in *OfficialAccountTemplateRequest, opts ...grpc.CallOption) (*OfficialAccountTemplateResp, error)
}

type gmpPlatformClient struct {
	cc grpc.ClientConnInterface
}

func NewGmpPlatformClient(cc grpc.ClientConnInterface) GmpPlatformClient {
	return &gmpPlatformClient{cc}
}

func (c *gmpPlatformClient) SendAccountEdit(ctx context.Context, in *SendAccountEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GmpPlatform_SendAccountEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) SendAccountChangeStatus(ctx context.Context, in *SendAccountChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GmpPlatform_SendAccountChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) SendAccountList(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountListResp, error) {
	out := new(SendAccountListResp)
	err := c.cc.Invoke(ctx, GmpPlatform_SendAccountList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) SendAccountQuery(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountQueryResp, error) {
	out := new(SendAccountQueryResp)
	err := c.cc.Invoke(ctx, GmpPlatform_SendAccountQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) TemplateEdit(ctx context.Context, in *TemplateEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GmpPlatform_TemplateEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) TemplateChangeStatus(ctx context.Context, in *TemplateChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GmpPlatform_TemplateChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) TemplateList(ctx context.Context, in *TemplateListRequest, opts ...grpc.CallOption) (*TemplateListResp, error) {
	out := new(TemplateListResp)
	err := c.cc.Invoke(ctx, GmpPlatform_TemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) TemplateRemove(ctx context.Context, in *TemplateRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GmpPlatform_TemplateRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) TemplateOne(ctx context.Context, in *TemplateOneRequest, opts ...grpc.CallOption) (*TemplateOneResp, error) {
	out := new(TemplateOneResp)
	err := c.cc.Invoke(ctx, GmpPlatform_TemplateOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) GetAllChannel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllChannelResp, error) {
	out := new(GetAllChannelResp)
	err := c.cc.Invoke(ctx, GmpPlatform_GetAllChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) GetSmsRecord(ctx context.Context, in *SmsRecordRequest, opts ...grpc.CallOption) (*SmsRecordResp, error) {
	out := new(SmsRecordResp)
	err := c.cc.Invoke(ctx, GmpPlatform_GetSmsRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) GetMsgRecord(ctx context.Context, in *MsgRecordRequest, opts ...grpc.CallOption) (*MsgRecordResp, error) {
	out := new(MsgRecordResp)
	err := c.cc.Invoke(ctx, GmpPlatform_GetMsgRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gmpPlatformClient) GetOfficialAccountTemplateList(ctx context.Context, in *OfficialAccountTemplateRequest, opts ...grpc.CallOption) (*OfficialAccountTemplateResp, error) {
	out := new(OfficialAccountTemplateResp)
	err := c.cc.Invoke(ctx, GmpPlatform_GetOfficialAccountTemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GmpPlatformServer is the server API for GmpPlatform service.
// All implementations must embed UnimplementedGmpPlatformServer
// for forward compatibility
type GmpPlatformServer interface {
	//新增/修改账号
	SendAccountEdit(context.Context, *SendAccountEditRequest) (*emptypb.Empty, error)
	//禁用/启用
	SendAccountChangeStatus(context.Context, *SendAccountChangeStatusRequest) (*emptypb.Empty, error)
	//账号列表
	SendAccountList(context.Context, *SendAccountListRequest) (*SendAccountListResp, error)
	//账号获取下拉
	SendAccountQuery(context.Context, *SendAccountListRequest) (*SendAccountQueryResp, error)
	//新增/修改模板
	TemplateEdit(context.Context, *TemplateEditRequest) (*emptypb.Empty, error)
	//禁用/启用
	TemplateChangeStatus(context.Context, *TemplateChangeStatusRequest) (*emptypb.Empty, error)
	//模板列表
	TemplateList(context.Context, *TemplateListRequest) (*TemplateListResp, error)
	//删除模板
	TemplateRemove(context.Context, *TemplateRemoveRequest) (*emptypb.Empty, error)
	//删除模板
	TemplateOne(context.Context, *TemplateOneRequest) (*TemplateOneResp, error)
	//获取所有支持的渠道
	GetAllChannel(context.Context, *emptypb.Empty) (*GetAllChannelResp, error)
	//短信记录列表
	GetSmsRecord(context.Context, *SmsRecordRequest) (*SmsRecordResp, error)
	//消息记录列表
	GetMsgRecord(context.Context, *MsgRecordRequest) (*MsgRecordResp, error)
	//获取微信小程序下拉模板
	GetOfficialAccountTemplateList(context.Context, *OfficialAccountTemplateRequest) (*OfficialAccountTemplateResp, error)
	mustEmbedUnimplementedGmpPlatformServer()
}

// UnimplementedGmpPlatformServer must be embedded to have forward compatible implementations.
type UnimplementedGmpPlatformServer struct {
}

func (UnimplementedGmpPlatformServer) SendAccountEdit(context.Context, *SendAccountEditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountEdit not implemented")
}
func (UnimplementedGmpPlatformServer) SendAccountChangeStatus(context.Context, *SendAccountChangeStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountChangeStatus not implemented")
}
func (UnimplementedGmpPlatformServer) SendAccountList(context.Context, *SendAccountListRequest) (*SendAccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountList not implemented")
}
func (UnimplementedGmpPlatformServer) SendAccountQuery(context.Context, *SendAccountListRequest) (*SendAccountQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountQuery not implemented")
}
func (UnimplementedGmpPlatformServer) TemplateEdit(context.Context, *TemplateEditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateEdit not implemented")
}
func (UnimplementedGmpPlatformServer) TemplateChangeStatus(context.Context, *TemplateChangeStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateChangeStatus not implemented")
}
func (UnimplementedGmpPlatformServer) TemplateList(context.Context, *TemplateListRequest) (*TemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateList not implemented")
}
func (UnimplementedGmpPlatformServer) TemplateRemove(context.Context, *TemplateRemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateRemove not implemented")
}
func (UnimplementedGmpPlatformServer) TemplateOne(context.Context, *TemplateOneRequest) (*TemplateOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateOne not implemented")
}
func (UnimplementedGmpPlatformServer) GetAllChannel(context.Context, *emptypb.Empty) (*GetAllChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChannel not implemented")
}
func (UnimplementedGmpPlatformServer) GetSmsRecord(context.Context, *SmsRecordRequest) (*SmsRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsRecord not implemented")
}
func (UnimplementedGmpPlatformServer) GetMsgRecord(context.Context, *MsgRecordRequest) (*MsgRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgRecord not implemented")
}
func (UnimplementedGmpPlatformServer) GetOfficialAccountTemplateList(context.Context, *OfficialAccountTemplateRequest) (*OfficialAccountTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialAccountTemplateList not implemented")
}
func (UnimplementedGmpPlatformServer) mustEmbedUnimplementedGmpPlatformServer() {}

// UnsafeGmpPlatformServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GmpPlatformServer will
// result in compilation errors.
type UnsafeGmpPlatformServer interface {
	mustEmbedUnimplementedGmpPlatformServer()
}

func RegisterGmpPlatformServer(s grpc.ServiceRegistrar, srv GmpPlatformServer) {
	s.RegisterService(&GmpPlatform_ServiceDesc, srv)
}

func _GmpPlatform_SendAccountEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).SendAccountEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_SendAccountEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).SendAccountEdit(ctx, req.(*SendAccountEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_SendAccountChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).SendAccountChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_SendAccountChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).SendAccountChangeStatus(ctx, req.(*SendAccountChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_SendAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).SendAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_SendAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).SendAccountList(ctx, req.(*SendAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_SendAccountQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).SendAccountQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_SendAccountQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).SendAccountQuery(ctx, req.(*SendAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_TemplateEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).TemplateEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_TemplateEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).TemplateEdit(ctx, req.(*TemplateEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_TemplateChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).TemplateChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_TemplateChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).TemplateChangeStatus(ctx, req.(*TemplateChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_TemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).TemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_TemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).TemplateList(ctx, req.(*TemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_TemplateRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).TemplateRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_TemplateRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).TemplateRemove(ctx, req.(*TemplateRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_TemplateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).TemplateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_TemplateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).TemplateOne(ctx, req.(*TemplateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_GetAllChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).GetAllChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_GetAllChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).GetAllChannel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_GetSmsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).GetSmsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_GetSmsRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).GetSmsRecord(ctx, req.(*SmsRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_GetMsgRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).GetMsgRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_GetMsgRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).GetMsgRecord(ctx, req.(*MsgRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GmpPlatform_GetOfficialAccountTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialAccountTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GmpPlatformServer).GetOfficialAccountTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GmpPlatform_GetOfficialAccountTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GmpPlatformServer).GetOfficialAccountTemplateList(ctx, req.(*OfficialAccountTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GmpPlatform_ServiceDesc is the grpc.ServiceDesc for GmpPlatform service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GmpPlatform_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gvs_mgr.GmpPlatform",
	HandlerType: (*GmpPlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAccountEdit",
			Handler:    _GmpPlatform_SendAccountEdit_Handler,
		},
		{
			MethodName: "SendAccountChangeStatus",
			Handler:    _GmpPlatform_SendAccountChangeStatus_Handler,
		},
		{
			MethodName: "SendAccountList",
			Handler:    _GmpPlatform_SendAccountList_Handler,
		},
		{
			MethodName: "SendAccountQuery",
			Handler:    _GmpPlatform_SendAccountQuery_Handler,
		},
		{
			MethodName: "TemplateEdit",
			Handler:    _GmpPlatform_TemplateEdit_Handler,
		},
		{
			MethodName: "TemplateChangeStatus",
			Handler:    _GmpPlatform_TemplateChangeStatus_Handler,
		},
		{
			MethodName: "TemplateList",
			Handler:    _GmpPlatform_TemplateList_Handler,
		},
		{
			MethodName: "TemplateRemove",
			Handler:    _GmpPlatform_TemplateRemove_Handler,
		},
		{
			MethodName: "TemplateOne",
			Handler:    _GmpPlatform_TemplateOne_Handler,
		},
		{
			MethodName: "GetAllChannel",
			Handler:    _GmpPlatform_GetAllChannel_Handler,
		},
		{
			MethodName: "GetSmsRecord",
			Handler:    _GmpPlatform_GetSmsRecord_Handler,
		},
		{
			MethodName: "GetMsgRecord",
			Handler:    _GmpPlatform_GetMsgRecord_Handler,
		},
		{
			MethodName: "GetOfficialAccountTemplateList",
			Handler:    _GmpPlatform_GetOfficialAccountTemplateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/mgr/gmp_platform.proto",
}
