// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.19.4
// source: api/mgr/common.proto

package mgr

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommonGetIndexConfig = "/api.gvs_mgr.Common/GetIndexConfig"
const OperationCommonGetWorkbench = "/api.gvs_mgr.Common/GetWorkbench"

type CommonHTTPServer interface {
	GetIndexConfig(context.Context, *emptypb.Empty) (*IndexConfigReply, error)
	GetWorkbench(context.Context, *emptypb.Empty) (*ConsoleReply, error)
}

func RegisterCommonHTTPServer(s *http.Server, srv CommonHTTPServer) {
	r := s.Route("/")
	r.GET("/common/index/console", _Common_GetWorkbench0_HTTP_Handler(srv))
	r.GET("/common/index/config", _Common_GetIndexConfig0_HTTP_Handler(srv))
}

func _Common_GetWorkbench0_HTTP_Handler(srv CommonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommonGetWorkbench)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkbench(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConsoleReply)
		return ctx.Result(200, reply)
	}
}

func _Common_GetIndexConfig0_HTTP_Handler(srv CommonHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommonGetIndexConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetIndexConfig(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexConfigReply)
		return ctx.Result(200, reply)
	}
}

type CommonHTTPClient interface {
	GetIndexConfig(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *IndexConfigReply, err error)
	GetWorkbench(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ConsoleReply, err error)
}

type CommonHTTPClientImpl struct {
	cc *http.Client
}

func NewCommonHTTPClient(client *http.Client) CommonHTTPClient {
	return &CommonHTTPClientImpl{client}
}

func (c *CommonHTTPClientImpl) GetIndexConfig(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*IndexConfigReply, error) {
	var out IndexConfigReply
	pattern := "/common/index/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommonGetIndexConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommonHTTPClientImpl) GetWorkbench(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ConsoleReply, error) {
	var out ConsoleReply
	pattern := "/common/index/console"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommonGetWorkbench))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
