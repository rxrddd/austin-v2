// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/msgpusher-manager/v1/msgpusher-manager.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MsgPusherManager_SendAccountEdit_FullMethodName                = "/api.msgpusher.manager.MsgPusherManager/SendAccountEdit"
	MsgPusherManager_SendAccountChangeStatus_FullMethodName        = "/api.msgpusher.manager.MsgPusherManager/SendAccountChangeStatus"
	MsgPusherManager_SendAccountList_FullMethodName                = "/api.msgpusher.manager.MsgPusherManager/SendAccountList"
	MsgPusherManager_SendAccountQuery_FullMethodName               = "/api.msgpusher.manager.MsgPusherManager/SendAccountQuery"
	MsgPusherManager_TemplateEdit_FullMethodName                   = "/api.msgpusher.manager.MsgPusherManager/TemplateEdit"
	MsgPusherManager_TemplateChangeStatus_FullMethodName           = "/api.msgpusher.manager.MsgPusherManager/TemplateChangeStatus"
	MsgPusherManager_TemplateList_FullMethodName                   = "/api.msgpusher.manager.MsgPusherManager/TemplateList"
	MsgPusherManager_TemplateRemove_FullMethodName                 = "/api.msgpusher.manager.MsgPusherManager/TemplateRemove"
	MsgPusherManager_TemplateOne_FullMethodName                    = "/api.msgpusher.manager.MsgPusherManager/TemplateOne"
	MsgPusherManager_GetAllChannel_FullMethodName                  = "/api.msgpusher.manager.MsgPusherManager/GetAllChannel"
	MsgPusherManager_GetSmsRecord_FullMethodName                   = "/api.msgpusher.manager.MsgPusherManager/GetSmsRecord"
	MsgPusherManager_GetMsgRecord_FullMethodName                   = "/api.msgpusher.manager.MsgPusherManager/GetMsgRecord"
	MsgPusherManager_GetOfficialAccountTemplateList_FullMethodName = "/api.msgpusher.manager.MsgPusherManager/GetOfficialAccountTemplateList"
)

// MsgPusherManagerClient is the client API for MsgPusherManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgPusherManagerClient interface {
	//新增/修改账号
	SendAccountEdit(ctx context.Context, in *SendAccountEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//禁用/启用
	SendAccountChangeStatus(ctx context.Context, in *SendAccountChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//账号列表
	SendAccountList(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountListResp, error)
	//账号获取下拉
	SendAccountQuery(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountQueryResp, error)
	//新增/修改模板
	TemplateEdit(ctx context.Context, in *TemplateEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//禁用/启用
	TemplateChangeStatus(ctx context.Context, in *TemplateChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//模板列表
	TemplateList(ctx context.Context, in *TemplateListRequest, opts ...grpc.CallOption) (*TemplateListResp, error)
	//删除模板
	TemplateRemove(ctx context.Context, in *TemplateRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TemplateOne(ctx context.Context, in *TemplateOneRequest, opts ...grpc.CallOption) (*TemplateOneResp, error)
	//获取所有支持的渠道
	GetAllChannel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllChannelResp, error)
	//短信记录列表
	GetSmsRecord(ctx context.Context, in *SmsRecordRequest, opts ...grpc.CallOption) (*SmsRecordResp, error)
	//消息记录列表
	GetMsgRecord(ctx context.Context, in *MsgRecordRequest, opts ...grpc.CallOption) (*MsgRecordResp, error)
	//获取微信模板列表
	GetOfficialAccountTemplateList(ctx context.Context, in *OfficialAccountTemplateRequest, opts ...grpc.CallOption) (*OfficialAccountTemplateResp, error)
}

type msgPusherManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgPusherManagerClient(cc grpc.ClientConnInterface) MsgPusherManagerClient {
	return &msgPusherManagerClient{cc}
}

func (c *msgPusherManagerClient) SendAccountEdit(ctx context.Context, in *SendAccountEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MsgPusherManager_SendAccountEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) SendAccountChangeStatus(ctx context.Context, in *SendAccountChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MsgPusherManager_SendAccountChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) SendAccountList(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountListResp, error) {
	out := new(SendAccountListResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_SendAccountList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) SendAccountQuery(ctx context.Context, in *SendAccountListRequest, opts ...grpc.CallOption) (*SendAccountQueryResp, error) {
	out := new(SendAccountQueryResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_SendAccountQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) TemplateEdit(ctx context.Context, in *TemplateEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MsgPusherManager_TemplateEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) TemplateChangeStatus(ctx context.Context, in *TemplateChangeStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MsgPusherManager_TemplateChangeStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) TemplateList(ctx context.Context, in *TemplateListRequest, opts ...grpc.CallOption) (*TemplateListResp, error) {
	out := new(TemplateListResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_TemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) TemplateRemove(ctx context.Context, in *TemplateRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MsgPusherManager_TemplateRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) TemplateOne(ctx context.Context, in *TemplateOneRequest, opts ...grpc.CallOption) (*TemplateOneResp, error) {
	out := new(TemplateOneResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_TemplateOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) GetAllChannel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllChannelResp, error) {
	out := new(GetAllChannelResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_GetAllChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) GetSmsRecord(ctx context.Context, in *SmsRecordRequest, opts ...grpc.CallOption) (*SmsRecordResp, error) {
	out := new(SmsRecordResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_GetSmsRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) GetMsgRecord(ctx context.Context, in *MsgRecordRequest, opts ...grpc.CallOption) (*MsgRecordResp, error) {
	out := new(MsgRecordResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_GetMsgRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgPusherManagerClient) GetOfficialAccountTemplateList(ctx context.Context, in *OfficialAccountTemplateRequest, opts ...grpc.CallOption) (*OfficialAccountTemplateResp, error) {
	out := new(OfficialAccountTemplateResp)
	err := c.cc.Invoke(ctx, MsgPusherManager_GetOfficialAccountTemplateList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgPusherManagerServer is the server API for MsgPusherManager service.
// All implementations must embed UnimplementedMsgPusherManagerServer
// for forward compatibility
type MsgPusherManagerServer interface {
	//新增/修改账号
	SendAccountEdit(context.Context, *SendAccountEditRequest) (*emptypb.Empty, error)
	//禁用/启用
	SendAccountChangeStatus(context.Context, *SendAccountChangeStatusRequest) (*emptypb.Empty, error)
	//账号列表
	SendAccountList(context.Context, *SendAccountListRequest) (*SendAccountListResp, error)
	//账号获取下拉
	SendAccountQuery(context.Context, *SendAccountListRequest) (*SendAccountQueryResp, error)
	//新增/修改模板
	TemplateEdit(context.Context, *TemplateEditRequest) (*emptypb.Empty, error)
	//禁用/启用
	TemplateChangeStatus(context.Context, *TemplateChangeStatusRequest) (*emptypb.Empty, error)
	//模板列表
	TemplateList(context.Context, *TemplateListRequest) (*TemplateListResp, error)
	//删除模板
	TemplateRemove(context.Context, *TemplateRemoveRequest) (*emptypb.Empty, error)
	TemplateOne(context.Context, *TemplateOneRequest) (*TemplateOneResp, error)
	//获取所有支持的渠道
	GetAllChannel(context.Context, *emptypb.Empty) (*GetAllChannelResp, error)
	//短信记录列表
	GetSmsRecord(context.Context, *SmsRecordRequest) (*SmsRecordResp, error)
	//消息记录列表
	GetMsgRecord(context.Context, *MsgRecordRequest) (*MsgRecordResp, error)
	//获取微信模板列表
	GetOfficialAccountTemplateList(context.Context, *OfficialAccountTemplateRequest) (*OfficialAccountTemplateResp, error)
	mustEmbedUnimplementedMsgPusherManagerServer()
}

// UnimplementedMsgPusherManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMsgPusherManagerServer struct {
}

func (UnimplementedMsgPusherManagerServer) SendAccountEdit(context.Context, *SendAccountEditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountEdit not implemented")
}
func (UnimplementedMsgPusherManagerServer) SendAccountChangeStatus(context.Context, *SendAccountChangeStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountChangeStatus not implemented")
}
func (UnimplementedMsgPusherManagerServer) SendAccountList(context.Context, *SendAccountListRequest) (*SendAccountListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountList not implemented")
}
func (UnimplementedMsgPusherManagerServer) SendAccountQuery(context.Context, *SendAccountListRequest) (*SendAccountQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccountQuery not implemented")
}
func (UnimplementedMsgPusherManagerServer) TemplateEdit(context.Context, *TemplateEditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateEdit not implemented")
}
func (UnimplementedMsgPusherManagerServer) TemplateChangeStatus(context.Context, *TemplateChangeStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateChangeStatus not implemented")
}
func (UnimplementedMsgPusherManagerServer) TemplateList(context.Context, *TemplateListRequest) (*TemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateList not implemented")
}
func (UnimplementedMsgPusherManagerServer) TemplateRemove(context.Context, *TemplateRemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateRemove not implemented")
}
func (UnimplementedMsgPusherManagerServer) TemplateOne(context.Context, *TemplateOneRequest) (*TemplateOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateOne not implemented")
}
func (UnimplementedMsgPusherManagerServer) GetAllChannel(context.Context, *emptypb.Empty) (*GetAllChannelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChannel not implemented")
}
func (UnimplementedMsgPusherManagerServer) GetSmsRecord(context.Context, *SmsRecordRequest) (*SmsRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsRecord not implemented")
}
func (UnimplementedMsgPusherManagerServer) GetMsgRecord(context.Context, *MsgRecordRequest) (*MsgRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgRecord not implemented")
}
func (UnimplementedMsgPusherManagerServer) GetOfficialAccountTemplateList(context.Context, *OfficialAccountTemplateRequest) (*OfficialAccountTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialAccountTemplateList not implemented")
}
func (UnimplementedMsgPusherManagerServer) mustEmbedUnimplementedMsgPusherManagerServer() {}

// UnsafeMsgPusherManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgPusherManagerServer will
// result in compilation errors.
type UnsafeMsgPusherManagerServer interface {
	mustEmbedUnimplementedMsgPusherManagerServer()
}

func RegisterMsgPusherManagerServer(s grpc.ServiceRegistrar, srv MsgPusherManagerServer) {
	s.RegisterService(&MsgPusherManager_ServiceDesc, srv)
}

func _MsgPusherManager_SendAccountEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).SendAccountEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_SendAccountEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).SendAccountEdit(ctx, req.(*SendAccountEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_SendAccountChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).SendAccountChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_SendAccountChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).SendAccountChangeStatus(ctx, req.(*SendAccountChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_SendAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).SendAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_SendAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).SendAccountList(ctx, req.(*SendAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_SendAccountQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).SendAccountQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_SendAccountQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).SendAccountQuery(ctx, req.(*SendAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_TemplateEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).TemplateEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_TemplateEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).TemplateEdit(ctx, req.(*TemplateEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_TemplateChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateChangeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).TemplateChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_TemplateChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).TemplateChangeStatus(ctx, req.(*TemplateChangeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_TemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).TemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_TemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).TemplateList(ctx, req.(*TemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_TemplateRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).TemplateRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_TemplateRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).TemplateRemove(ctx, req.(*TemplateRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_TemplateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).TemplateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_TemplateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).TemplateOne(ctx, req.(*TemplateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_GetAllChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).GetAllChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_GetAllChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).GetAllChannel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_GetSmsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).GetSmsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_GetSmsRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).GetSmsRecord(ctx, req.(*SmsRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_GetMsgRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).GetMsgRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_GetMsgRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).GetMsgRecord(ctx, req.(*MsgRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MsgPusherManager_GetOfficialAccountTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfficialAccountTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgPusherManagerServer).GetOfficialAccountTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MsgPusherManager_GetOfficialAccountTemplateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgPusherManagerServer).GetOfficialAccountTemplateList(ctx, req.(*OfficialAccountTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgPusherManager_ServiceDesc is the grpc.ServiceDesc for MsgPusherManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgPusherManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.msgpusher.manager.MsgPusherManager",
	HandlerType: (*MsgPusherManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAccountEdit",
			Handler:    _MsgPusherManager_SendAccountEdit_Handler,
		},
		{
			MethodName: "SendAccountChangeStatus",
			Handler:    _MsgPusherManager_SendAccountChangeStatus_Handler,
		},
		{
			MethodName: "SendAccountList",
			Handler:    _MsgPusherManager_SendAccountList_Handler,
		},
		{
			MethodName: "SendAccountQuery",
			Handler:    _MsgPusherManager_SendAccountQuery_Handler,
		},
		{
			MethodName: "TemplateEdit",
			Handler:    _MsgPusherManager_TemplateEdit_Handler,
		},
		{
			MethodName: "TemplateChangeStatus",
			Handler:    _MsgPusherManager_TemplateChangeStatus_Handler,
		},
		{
			MethodName: "TemplateList",
			Handler:    _MsgPusherManager_TemplateList_Handler,
		},
		{
			MethodName: "TemplateRemove",
			Handler:    _MsgPusherManager_TemplateRemove_Handler,
		},
		{
			MethodName: "TemplateOne",
			Handler:    _MsgPusherManager_TemplateOne_Handler,
		},
		{
			MethodName: "GetAllChannel",
			Handler:    _MsgPusherManager_GetAllChannel_Handler,
		},
		{
			MethodName: "GetSmsRecord",
			Handler:    _MsgPusherManager_GetSmsRecord_Handler,
		},
		{
			MethodName: "GetMsgRecord",
			Handler:    _MsgPusherManager_GetMsgRecord_Handler,
		},
		{
			MethodName: "GetOfficialAccountTemplateList",
			Handler:    _MsgPusherManager_GetOfficialAccountTemplateList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/msgpusher-manager/v1/msgpusher-manager.proto",
}
