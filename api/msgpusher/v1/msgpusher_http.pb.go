// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0--rc1
// source: api/msgpusher/v1/msgpusher.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMsgPusherBatchSend = "/api.msgpusher.MsgPusher/BatchSend"
const OperationMsgPusherSend = "/api.msgpusher.MsgPusher/Send"

type MsgPusherHTTPServer interface {
	BatchSend(context.Context, *BatchSendRequest) (*SendResponse, error)
	Send(context.Context, *SendRequest) (*SendResponse, error)
}

func RegisterMsgPusherHTTPServer(s *http.Server, srv MsgPusherHTTPServer) {
	r := s.Route("/")
	r.POST("/msgpusher/v1/send", _MsgPusher_Send0_HTTP_Handler(srv))
	r.POST("/msgpusher/v1/batch_send", _MsgPusher_BatchSend0_HTTP_Handler(srv))
}

func _MsgPusher_Send0_HTTP_Handler(srv MsgPusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMsgPusherSend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Send(ctx, req.(*SendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendResponse)
		return ctx.Result(200, reply)
	}
}

func _MsgPusher_BatchSend0_HTTP_Handler(srv MsgPusherHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchSendRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMsgPusherBatchSend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchSend(ctx, req.(*BatchSendRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendResponse)
		return ctx.Result(200, reply)
	}
}

type MsgPusherHTTPClient interface {
	BatchSend(ctx context.Context, req *BatchSendRequest, opts ...http.CallOption) (rsp *SendResponse, err error)
	Send(ctx context.Context, req *SendRequest, opts ...http.CallOption) (rsp *SendResponse, err error)
}

type MsgPusherHTTPClientImpl struct {
	cc *http.Client
}

func NewMsgPusherHTTPClient(client *http.Client) MsgPusherHTTPClient {
	return &MsgPusherHTTPClientImpl{client}
}

func (c *MsgPusherHTTPClientImpl) BatchSend(ctx context.Context, in *BatchSendRequest, opts ...http.CallOption) (*SendResponse, error) {
	var out SendResponse
	pattern := "/msgpusher/v1/batch_send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMsgPusherBatchSend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MsgPusherHTTPClientImpl) Send(ctx context.Context, in *SendRequest, opts ...http.CallOption) (*SendResponse, error) {
	var out SendResponse
	pattern := "/msgpusher/v1/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMsgPusherSend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
