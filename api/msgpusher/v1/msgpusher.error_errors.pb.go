// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

//参数错误
func IsClientParamsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CLIENT_PARAMS_ERROR.String() && e.Code == 500
}

//参数错误
func ErrorClientParamsError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CLIENT_PARAMS_ERROR.String(), fmt.Sprintf(format, args...))
}

//模板错误
func IsSearchMessageTemplate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SEARCH_MESSAGE_TEMPLATE.String() && e.Code == 500
}

//模板错误
func ErrorSearchMessageTemplate(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SEARCH_MESSAGE_TEMPLATE.String(), fmt.Sprintf(format, args...))
}

//参数check错误
func IsPreParamCheck(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PRE_PARAM_CHECK.String() && e.Code == 500
}

//参数check错误
func ErrorPreParamCheck(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PRE_PARAM_CHECK.String(), fmt.Sprintf(format, args...))
}

//全部被过滤掉了
func IsPreParamAllFilter(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PRE_PARAM_ALL_FILTER.String() && e.Code == 500
}

//全部被过滤掉了
func ErrorPreParamAllFilter(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PRE_PARAM_ALL_FILTER.String(), fmt.Sprintf(format, args...))
}

//系统异常
func IsSystem(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM.String() && e.Code == 500
}

//系统异常
func ErrorSystem(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM.String(), fmt.Sprintf(format, args...))
}
