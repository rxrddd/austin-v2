// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: api/authorization/v1/authorization.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	// 检查权限
	CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 角色列表
	GetRoleList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleListReply, error)
	// 角色创建
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*RoleInfo, error)
	// 角色更新
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*RoleInfo, error)
	// 角色删除
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 设置用户角色关系
	SetRolesForUser(ctx context.Context, in *SetRolesForUserRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 添加用户角色关系
	AddRolesForUser(ctx context.Context, in *AddRolesForUserRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 获取用户角色列表
	GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserReply, error)
	// 获取角色用户列表
	GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest, opts ...grpc.CallOption) (*GetUsersForRoleReply, error)
	// 删除用户某个角色
	DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 删除用户所有角色
	DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 策略授权规则列表
	GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...grpc.CallOption) (*GetPoliciesReply, error)
	// 策略添加授权规则
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 所有Api列表
	GetApiAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApiAllReply, error)
	// Api列表
	GetApiList(ctx context.Context, in *GetApiListRequest, opts ...grpc.CallOption) (*GetApiListReply, error)
	// Api创建
	CreateApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*ApiInfo, error)
	// Api更新
	UpdateApi(ctx context.Context, in *UpdateApiRequest, opts ...grpc.CallOption) (*ApiInfo, error)
	// Api删除
	DeleteApi(ctx context.Context, in *DeleteApiRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 所有Menu列表
	GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeReply, error)
	// Menu列表
	GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeReply, error)
	// Menu创建
	CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*MenuInfo, error)
	// Menu更新
	UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*MenuInfo, error)
	// Menu删除
	DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 角色菜单列表树
	GetRoleMenuTree(ctx context.Context, in *GetRoleMenuRequest, opts ...grpc.CallOption) (*GetMenuTreeReply, error)
	// 角色菜单列表
	GetRoleMenu(ctx context.Context, in *GetRoleMenuRequest, opts ...grpc.CallOption) (*GetMenuTreeReply, error)
	// 角色菜单更新
	SetRoleMenu(ctx context.Context, in *SetRoleMenuRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// 获取角色菜单按钮列表
	GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnRequest, opts ...grpc.CallOption) (*GetRoleMenuBtnReply, error)
	// 保存角色菜单按钮列表
	SetRoleMenuBtn(ctx context.Context, in *SetRoleMenuBtnRequest, opts ...grpc.CallOption) (*CheckReply, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) CheckAuthorization(ctx context.Context, in *CheckAuthorizationRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/CheckAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRoleList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRoleListReply, error) {
	out := new(GetRoleListReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*RoleInfo, error) {
	out := new(RoleInfo)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*RoleInfo, error) {
	out := new(RoleInfo)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetRolesForUser(ctx context.Context, in *SetRolesForUserRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/SetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddRolesForUser(ctx context.Context, in *AddRolesForUserRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/AddRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...grpc.CallOption) (*GetRolesForUserReply, error) {
	out := new(GetRolesForUserReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest, opts ...grpc.CallOption) (*GetUsersForRoleReply, error) {
	out := new(GetUsersForRoleReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetUsersForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/DeleteRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/DeleteRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...grpc.CallOption) (*GetPoliciesReply, error) {
	out := new(GetPoliciesReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetApiAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApiAllReply, error) {
	out := new(GetApiAllReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetApiAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetApiList(ctx context.Context, in *GetApiListRequest, opts ...grpc.CallOption) (*GetApiListReply, error) {
	out := new(GetApiListReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetApiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateApi(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*ApiInfo, error) {
	out := new(ApiInfo)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/CreateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateApi(ctx context.Context, in *UpdateApiRequest, opts ...grpc.CallOption) (*ApiInfo, error) {
	out := new(ApiInfo)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/UpdateApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteApi(ctx context.Context, in *DeleteApiRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/DeleteApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeReply, error) {
	out := new(GetMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetMenuAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMenuTreeReply, error) {
	out := new(GetMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*MenuInfo, error) {
	out := new(MenuInfo)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*MenuInfo, error) {
	out := new(MenuInfo)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRoleMenuTree(ctx context.Context, in *GetRoleMenuRequest, opts ...grpc.CallOption) (*GetMenuTreeReply, error) {
	out := new(GetMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetRoleMenuTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRoleMenu(ctx context.Context, in *GetRoleMenuRequest, opts ...grpc.CallOption) (*GetMenuTreeReply, error) {
	out := new(GetMenuTreeReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetRoleMenu(ctx context.Context, in *SetRoleMenuRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/SetRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnRequest, opts ...grpc.CallOption) (*GetRoleMenuBtnReply, error) {
	out := new(GetRoleMenuBtnReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/GetRoleMenuBtn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) SetRoleMenuBtn(ctx context.Context, in *SetRoleMenuBtnRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.authorization.v1.Authorization/SetRoleMenuBtn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	// 检查权限
	CheckAuthorization(context.Context, *CheckAuthorizationRequest) (*CheckReply, error)
	// 角色列表
	GetRoleList(context.Context, *emptypb.Empty) (*GetRoleListReply, error)
	// 角色创建
	CreateRole(context.Context, *CreateRoleRequest) (*RoleInfo, error)
	// 角色更新
	UpdateRole(context.Context, *UpdateRoleRequest) (*RoleInfo, error)
	// 角色删除
	DeleteRole(context.Context, *DeleteRoleRequest) (*CheckReply, error)
	// 设置用户角色关系
	SetRolesForUser(context.Context, *SetRolesForUserRequest) (*CheckReply, error)
	// 添加用户角色关系
	AddRolesForUser(context.Context, *AddRolesForUserRequest) (*CheckReply, error)
	// 获取用户角色列表
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserReply, error)
	// 获取角色用户列表
	GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleReply, error)
	// 删除用户某个角色
	DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*CheckReply, error)
	// 删除用户所有角色
	DeleteRolesForUser(context.Context, *DeleteRolesForUserRequest) (*CheckReply, error)
	// 策略授权规则列表
	GetPolicies(context.Context, *GetPoliciesRequest) (*GetPoliciesReply, error)
	// 策略添加授权规则
	UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*CheckReply, error)
	// 所有Api列表
	GetApiAll(context.Context, *emptypb.Empty) (*GetApiAllReply, error)
	// Api列表
	GetApiList(context.Context, *GetApiListRequest) (*GetApiListReply, error)
	// Api创建
	CreateApi(context.Context, *CreateApiRequest) (*ApiInfo, error)
	// Api更新
	UpdateApi(context.Context, *UpdateApiRequest) (*ApiInfo, error)
	// Api删除
	DeleteApi(context.Context, *DeleteApiRequest) (*CheckReply, error)
	// 所有Menu列表
	GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeReply, error)
	// Menu列表
	GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeReply, error)
	// Menu创建
	CreateMenu(context.Context, *CreateMenuRequest) (*MenuInfo, error)
	// Menu更新
	UpdateMenu(context.Context, *UpdateMenuRequest) (*MenuInfo, error)
	// Menu删除
	DeleteMenu(context.Context, *DeleteMenuRequest) (*CheckReply, error)
	// 角色菜单列表树
	GetRoleMenuTree(context.Context, *GetRoleMenuRequest) (*GetMenuTreeReply, error)
	// 角色菜单列表
	GetRoleMenu(context.Context, *GetRoleMenuRequest) (*GetMenuTreeReply, error)
	// 角色菜单更新
	SetRoleMenu(context.Context, *SetRoleMenuRequest) (*CheckReply, error)
	// 获取角色菜单按钮列表
	GetRoleMenuBtn(context.Context, *GetRoleMenuBtnRequest) (*GetRoleMenuBtnReply, error)
	// 保存角色菜单按钮列表
	SetRoleMenuBtn(context.Context, *SetRoleMenuBtnRequest) (*CheckReply, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) CheckAuthorization(context.Context, *CheckAuthorizationRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedAuthorizationServer) GetRoleList(context.Context, *emptypb.Empty) (*GetRoleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedAuthorizationServer) CreateRole(context.Context, *CreateRoleRequest) (*RoleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthorizationServer) UpdateRole(context.Context, *UpdateRoleRequest) (*RoleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthorizationServer) DeleteRole(context.Context, *DeleteRoleRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthorizationServer) SetRolesForUser(context.Context, *SetRolesForUserRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRolesForUser not implemented")
}
func (UnimplementedAuthorizationServer) AddRolesForUser(context.Context, *AddRolesForUserRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolesForUser not implemented")
}
func (UnimplementedAuthorizationServer) GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedAuthorizationServer) GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (UnimplementedAuthorizationServer) DeleteRoleForUser(context.Context, *DeleteRoleForUserRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedAuthorizationServer) DeleteRolesForUser(context.Context, *DeleteRolesForUserRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (UnimplementedAuthorizationServer) GetPolicies(context.Context, *GetPoliciesRequest) (*GetPoliciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicies not implemented")
}
func (UnimplementedAuthorizationServer) UpdatePolicies(context.Context, *UpdatePoliciesRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (UnimplementedAuthorizationServer) GetApiAll(context.Context, *emptypb.Empty) (*GetApiAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiAll not implemented")
}
func (UnimplementedAuthorizationServer) GetApiList(context.Context, *GetApiListRequest) (*GetApiListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiList not implemented")
}
func (UnimplementedAuthorizationServer) CreateApi(context.Context, *CreateApiRequest) (*ApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApi not implemented")
}
func (UnimplementedAuthorizationServer) UpdateApi(context.Context, *UpdateApiRequest) (*ApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApi not implemented")
}
func (UnimplementedAuthorizationServer) DeleteApi(context.Context, *DeleteApiRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApi not implemented")
}
func (UnimplementedAuthorizationServer) GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuAll not implemented")
}
func (UnimplementedAuthorizationServer) GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTree not implemented")
}
func (UnimplementedAuthorizationServer) CreateMenu(context.Context, *CreateMenuRequest) (*MenuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAuthorizationServer) UpdateMenu(context.Context, *UpdateMenuRequest) (*MenuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAuthorizationServer) DeleteMenu(context.Context, *DeleteMenuRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAuthorizationServer) GetRoleMenuTree(context.Context, *GetRoleMenuRequest) (*GetMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuTree not implemented")
}
func (UnimplementedAuthorizationServer) GetRoleMenu(context.Context, *GetRoleMenuRequest) (*GetMenuTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenu not implemented")
}
func (UnimplementedAuthorizationServer) SetRoleMenu(context.Context, *SetRoleMenuRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleMenu not implemented")
}
func (UnimplementedAuthorizationServer) GetRoleMenuBtn(context.Context, *GetRoleMenuBtnRequest) (*GetRoleMenuBtnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuBtn not implemented")
}
func (UnimplementedAuthorizationServer) SetRoleMenuBtn(context.Context, *SetRoleMenuBtnRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleMenuBtn not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/CheckAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CheckAuthorization(ctx, req.(*CheckAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRoleList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/SetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetRolesForUser(ctx, req.(*SetRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/AddRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddRolesForUser(ctx, req.(*AddRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRolesForUser(ctx, req.(*GetRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersForRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetUsersForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetUsersForRole(ctx, req.(*GetUsersForRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/DeleteRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteRoleForUser(ctx, req.(*DeleteRoleForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/DeleteRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteRolesForUser(ctx, req.(*DeleteRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetPolicies(ctx, req.(*GetPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdatePolicies(ctx, req.(*UpdatePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetApiAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetApiAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetApiAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetApiAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetApiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetApiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetApiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetApiList(ctx, req.(*GetApiListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/CreateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateApi(ctx, req.(*CreateApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/UpdateApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateApi(ctx, req.(*UpdateApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/DeleteApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteApi(ctx, req.(*DeleteApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetMenuAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetMenuAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetMenuAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetMenuAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetMenuTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).CreateMenu(ctx, req.(*CreateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateMenu(ctx, req.(*UpdateMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteMenu(ctx, req.(*DeleteMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRoleMenuTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRoleMenuTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetRoleMenuTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRoleMenuTree(ctx, req.(*GetRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRoleMenu(ctx, req.(*GetRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/SetRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetRoleMenu(ctx, req.(*SetRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRoleMenuBtn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuBtnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRoleMenuBtn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/GetRoleMenuBtn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRoleMenuBtn(ctx, req.(*GetRoleMenuBtnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_SetRoleMenuBtn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleMenuBtnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).SetRoleMenuBtn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authorization.v1.Authorization/SetRoleMenuBtn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).SetRoleMenuBtn(ctx, req.(*SetRoleMenuBtnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.authorization.v1.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorization",
			Handler:    _Authorization_CheckAuthorization_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _Authorization_GetRoleList_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Authorization_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Authorization_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Authorization_DeleteRole_Handler,
		},
		{
			MethodName: "SetRolesForUser",
			Handler:    _Authorization_SetRolesForUser_Handler,
		},
		{
			MethodName: "AddRolesForUser",
			Handler:    _Authorization_AddRolesForUser_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _Authorization_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _Authorization_GetUsersForRole_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _Authorization_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _Authorization_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "GetPolicies",
			Handler:    _Authorization_GetPolicies_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _Authorization_UpdatePolicies_Handler,
		},
		{
			MethodName: "GetApiAll",
			Handler:    _Authorization_GetApiAll_Handler,
		},
		{
			MethodName: "GetApiList",
			Handler:    _Authorization_GetApiList_Handler,
		},
		{
			MethodName: "CreateApi",
			Handler:    _Authorization_CreateApi_Handler,
		},
		{
			MethodName: "UpdateApi",
			Handler:    _Authorization_UpdateApi_Handler,
		},
		{
			MethodName: "DeleteApi",
			Handler:    _Authorization_DeleteApi_Handler,
		},
		{
			MethodName: "GetMenuAll",
			Handler:    _Authorization_GetMenuAll_Handler,
		},
		{
			MethodName: "GetMenuTree",
			Handler:    _Authorization_GetMenuTree_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Authorization_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Authorization_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Authorization_DeleteMenu_Handler,
		},
		{
			MethodName: "GetRoleMenuTree",
			Handler:    _Authorization_GetRoleMenuTree_Handler,
		},
		{
			MethodName: "GetRoleMenu",
			Handler:    _Authorization_GetRoleMenu_Handler,
		},
		{
			MethodName: "SetRoleMenu",
			Handler:    _Authorization_SetRoleMenu_Handler,
		},
		{
			MethodName: "GetRoleMenuBtn",
			Handler:    _Authorization_GetRoleMenuBtn_Handler,
		},
		{
			MethodName: "SetRoleMenuBtn",
			Handler:    _Authorization_SetRoleMenuBtn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/authorization/v1/authorization.proto",
}
