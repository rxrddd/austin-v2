// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: api/administrator/v1/jobs.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdministratorClient is the client API for Administrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdministratorClient interface {
	CreateAdministrator(ctx context.Context, in *CreateAdministratorRequest, opts ...grpc.CallOption) (*AdministratorInfoResponse, error)
	UpdateAdministrator(ctx context.Context, in *UpdateAdministratorRequest, opts ...grpc.CallOption) (*AdministratorInfoResponse, error)
	GetAdministrator(ctx context.Context, in *GetAdministratorRequest, opts ...grpc.CallOption) (*AdministratorInfoResponse, error)
	ListAdministrator(ctx context.Context, in *ListAdministratorRequest, opts ...grpc.CallOption) (*ListAdministratorReply, error)
	DeleteAdministrator(ctx context.Context, in *DeleteAdministratorRequest, opts ...grpc.CallOption) (*CheckReply, error)
	RecoverAdministrator(ctx context.Context, in *RecoverAdministratorRequest, opts ...grpc.CallOption) (*CheckReply, error)
	VerifyAdministratorPassword(ctx context.Context, in *VerifyAdministratorPasswordRequest, opts ...grpc.CallOption) (*CheckReply, error)
	AdministratorLoginSuccess(ctx context.Context, in *AdministratorLoginSuccessRequest, opts ...grpc.CallOption) (*CheckReply, error)
	AdministratorStatusChange(ctx context.Context, in *AdministratorStatusChangeRequest, opts ...grpc.CallOption) (*CheckReply, error)
}

type administratorClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorClient(cc grpc.ClientConnInterface) AdministratorClient {
	return &administratorClient{cc}
}

func (c *administratorClient) CreateAdministrator(ctx context.Context, in *CreateAdministratorRequest, opts ...grpc.CallOption) (*AdministratorInfoResponse, error) {
	out := new(AdministratorInfoResponse)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/CreateAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) UpdateAdministrator(ctx context.Context, in *UpdateAdministratorRequest, opts ...grpc.CallOption) (*AdministratorInfoResponse, error) {
	out := new(AdministratorInfoResponse)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/UpdateAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) GetAdministrator(ctx context.Context, in *GetAdministratorRequest, opts ...grpc.CallOption) (*AdministratorInfoResponse, error) {
	out := new(AdministratorInfoResponse)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/GetAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) ListAdministrator(ctx context.Context, in *ListAdministratorRequest, opts ...grpc.CallOption) (*ListAdministratorReply, error) {
	out := new(ListAdministratorReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/ListAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) DeleteAdministrator(ctx context.Context, in *DeleteAdministratorRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/DeleteAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) RecoverAdministrator(ctx context.Context, in *RecoverAdministratorRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/RecoverAdministrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) VerifyAdministratorPassword(ctx context.Context, in *VerifyAdministratorPasswordRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/VerifyAdministratorPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) AdministratorLoginSuccess(ctx context.Context, in *AdministratorLoginSuccessRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/AdministratorLoginSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorClient) AdministratorStatusChange(ctx context.Context, in *AdministratorStatusChangeRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/api.administrator.v1.Administrator/AdministratorStatusChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorServer is the serviceName API for Administrator service.
// All implementations must embed UnimplementedAdministratorServer
// for forward compatibility
type AdministratorServer interface {
	CreateAdministrator(context.Context, *CreateAdministratorRequest) (*AdministratorInfoResponse, error)
	UpdateAdministrator(context.Context, *UpdateAdministratorRequest) (*AdministratorInfoResponse, error)
	GetAdministrator(context.Context, *GetAdministratorRequest) (*AdministratorInfoResponse, error)
	ListAdministrator(context.Context, *ListAdministratorRequest) (*ListAdministratorReply, error)
	DeleteAdministrator(context.Context, *DeleteAdministratorRequest) (*CheckReply, error)
	RecoverAdministrator(context.Context, *RecoverAdministratorRequest) (*CheckReply, error)
	VerifyAdministratorPassword(context.Context, *VerifyAdministratorPasswordRequest) (*CheckReply, error)
	AdministratorLoginSuccess(context.Context, *AdministratorLoginSuccessRequest) (*CheckReply, error)
	AdministratorStatusChange(context.Context, *AdministratorStatusChangeRequest) (*CheckReply, error)
	mustEmbedUnimplementedAdministratorServer()
}

// UnimplementedAdministratorServer must be embedded to have forward compatible implementations.
type UnimplementedAdministratorServer struct {
}

func (UnimplementedAdministratorServer) CreateAdministrator(context.Context, *CreateAdministratorRequest) (*AdministratorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdministrator not implemented")
}
func (UnimplementedAdministratorServer) UpdateAdministrator(context.Context, *UpdateAdministratorRequest) (*AdministratorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdministrator not implemented")
}
func (UnimplementedAdministratorServer) GetAdministrator(context.Context, *GetAdministratorRequest) (*AdministratorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrator not implemented")
}
func (UnimplementedAdministratorServer) ListAdministrator(context.Context, *ListAdministratorRequest) (*ListAdministratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdministrator not implemented")
}
func (UnimplementedAdministratorServer) DeleteAdministrator(context.Context, *DeleteAdministratorRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdministrator not implemented")
}
func (UnimplementedAdministratorServer) RecoverAdministrator(context.Context, *RecoverAdministratorRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAdministrator not implemented")
}
func (UnimplementedAdministratorServer) VerifyAdministratorPassword(context.Context, *VerifyAdministratorPasswordRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAdministratorPassword not implemented")
}
func (UnimplementedAdministratorServer) AdministratorLoginSuccess(context.Context, *AdministratorLoginSuccessRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdministratorLoginSuccess not implemented")
}
func (UnimplementedAdministratorServer) AdministratorStatusChange(context.Context, *AdministratorStatusChangeRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdministratorStatusChange not implemented")
}
func (UnimplementedAdministratorServer) mustEmbedUnimplementedAdministratorServer() {}

// UnsafeAdministratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorServer will
// result in compilation errors.
type UnsafeAdministratorServer interface {
	mustEmbedUnimplementedAdministratorServer()
}

func RegisterAdministratorServer(s grpc.ServiceRegistrar, srv AdministratorServer) {
	s.RegisterService(&Administrator_ServiceDesc, srv)
}

func _Administrator_CreateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).CreateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/CreateAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).CreateAdministrator(ctx, req.(*CreateAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_UpdateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).UpdateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/UpdateAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).UpdateAdministrator(ctx, req.(*UpdateAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_GetAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).GetAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/GetAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).GetAdministrator(ctx, req.(*GetAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_ListAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).ListAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/ListAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).ListAdministrator(ctx, req.(*ListAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_DeleteAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).DeleteAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/DeleteAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).DeleteAdministrator(ctx, req.(*DeleteAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_RecoverAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).RecoverAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/RecoverAdministrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).RecoverAdministrator(ctx, req.(*RecoverAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_VerifyAdministratorPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAdministratorPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).VerifyAdministratorPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/VerifyAdministratorPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).VerifyAdministratorPassword(ctx, req.(*VerifyAdministratorPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_AdministratorLoginSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdministratorLoginSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).AdministratorLoginSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/AdministratorLoginSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).AdministratorLoginSuccess(ctx, req.(*AdministratorLoginSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administrator_AdministratorStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdministratorStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServer).AdministratorStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.administrator.v1.Administrator/AdministratorStatusChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServer).AdministratorStatusChange(ctx, req.(*AdministratorStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Administrator_ServiceDesc is the grpc.ServiceDesc for Administrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Administrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.administrator.v1.Administrator",
	HandlerType: (*AdministratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdministrator",
			Handler:    _Administrator_CreateAdministrator_Handler,
		},
		{
			MethodName: "UpdateAdministrator",
			Handler:    _Administrator_UpdateAdministrator_Handler,
		},
		{
			MethodName: "GetAdministrator",
			Handler:    _Administrator_GetAdministrator_Handler,
		},
		{
			MethodName: "ListAdministrator",
			Handler:    _Administrator_ListAdministrator_Handler,
		},
		{
			MethodName: "DeleteAdministrator",
			Handler:    _Administrator_DeleteAdministrator_Handler,
		},
		{
			MethodName: "RecoverAdministrator",
			Handler:    _Administrator_RecoverAdministrator_Handler,
		},
		{
			MethodName: "VerifyAdministratorPassword",
			Handler:    _Administrator_VerifyAdministratorPassword_Handler,
		},
		{
			MethodName: "AdministratorLoginSuccess",
			Handler:    _Administrator_AdministratorLoginSuccess_Handler,
		},
		{
			MethodName: "AdministratorStatusChange",
			Handler:    _Administrator_AdministratorStatusChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/administrator/v1/jobs.proto",
}
