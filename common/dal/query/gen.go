// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		LaSystemAdminRole: newLaSystemAdminRole(db, opts...),
		LaSystemAuthAdmin: newLaSystemAuthAdmin(db, opts...),
		LaSystemAuthMenu:  newLaSystemAuthMenu(db, opts...),
		LaSystemAuthRole:  newLaSystemAuthRole(db, opts...),
		MessageTemplate:   newMessageTemplate(db, opts...),
		MsgRecord:         newMsgRecord(db, opts...),
		SendAccount:       newSendAccount(db, opts...),
		SmsRecord:         newSmsRecord(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	LaSystemAdminRole laSystemAdminRole
	LaSystemAuthAdmin laSystemAuthAdmin
	LaSystemAuthMenu  laSystemAuthMenu
	LaSystemAuthRole  laSystemAuthRole
	MessageTemplate   messageTemplate
	MsgRecord         msgRecord
	SendAccount       sendAccount
	SmsRecord         smsRecord
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		LaSystemAdminRole: q.LaSystemAdminRole.clone(db),
		LaSystemAuthAdmin: q.LaSystemAuthAdmin.clone(db),
		LaSystemAuthMenu:  q.LaSystemAuthMenu.clone(db),
		LaSystemAuthRole:  q.LaSystemAuthRole.clone(db),
		MessageTemplate:   q.MessageTemplate.clone(db),
		MsgRecord:         q.MsgRecord.clone(db),
		SendAccount:       q.SendAccount.clone(db),
		SmsRecord:         q.SmsRecord.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		LaSystemAdminRole: q.LaSystemAdminRole.replaceDB(db),
		LaSystemAuthAdmin: q.LaSystemAuthAdmin.replaceDB(db),
		LaSystemAuthMenu:  q.LaSystemAuthMenu.replaceDB(db),
		LaSystemAuthRole:  q.LaSystemAuthRole.replaceDB(db),
		MessageTemplate:   q.MessageTemplate.replaceDB(db),
		MsgRecord:         q.MsgRecord.replaceDB(db),
		SendAccount:       q.SendAccount.replaceDB(db),
		SmsRecord:         q.SmsRecord.replaceDB(db),
	}
}

type queryCtx struct {
	LaSystemAdminRole *laSystemAdminRoleDo
	LaSystemAuthAdmin *laSystemAuthAdminDo
	LaSystemAuthMenu  *laSystemAuthMenuDo
	LaSystemAuthRole  *laSystemAuthRoleDo
	MessageTemplate   *messageTemplateDo
	MsgRecord         *msgRecordDo
	SendAccount       *sendAccountDo
	SmsRecord         *smsRecordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		LaSystemAdminRole: q.LaSystemAdminRole.WithContext(ctx),
		LaSystemAuthAdmin: q.LaSystemAuthAdmin.WithContext(ctx),
		LaSystemAuthMenu:  q.LaSystemAuthMenu.WithContext(ctx),
		LaSystemAuthRole:  q.LaSystemAuthRole.WithContext(ctx),
		MessageTemplate:   q.MessageTemplate.WithContext(ctx),
		MsgRecord:         q.MsgRecord.WithContext(ctx),
		SendAccount:       q.SendAccount.WithContext(ctx),
		SmsRecord:         q.SmsRecord.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
