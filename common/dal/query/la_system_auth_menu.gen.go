// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newLaSystemAuthMenu(db *gorm.DB, opts ...gen.DOOption) laSystemAuthMenu {
	_laSystemAuthMenu := laSystemAuthMenu{}

	_laSystemAuthMenu.laSystemAuthMenuDo.UseDB(db, opts...)
	_laSystemAuthMenu.laSystemAuthMenuDo.UseModel(&model.LaSystemAuthMenu{})

	tableName := _laSystemAuthMenu.laSystemAuthMenuDo.TableName()
	_laSystemAuthMenu.ALL = field.NewAsterisk(tableName)
	_laSystemAuthMenu.ID = field.NewInt32(tableName, "id")
	_laSystemAuthMenu.Pid = field.NewInt32(tableName, "pid")
	_laSystemAuthMenu.MenuType = field.NewString(tableName, "menu_type")
	_laSystemAuthMenu.MenuName = field.NewString(tableName, "menu_name")
	_laSystemAuthMenu.MenuIcon = field.NewString(tableName, "menu_icon")
	_laSystemAuthMenu.MenuSort = field.NewInt32(tableName, "menu_sort")
	_laSystemAuthMenu.Perms = field.NewString(tableName, "perms")
	_laSystemAuthMenu.Paths = field.NewString(tableName, "paths")
	_laSystemAuthMenu.Component = field.NewString(tableName, "component")
	_laSystemAuthMenu.Selected = field.NewString(tableName, "selected")
	_laSystemAuthMenu.Params = field.NewString(tableName, "params")
	_laSystemAuthMenu.IsCache = field.NewInt32(tableName, "is_cache")
	_laSystemAuthMenu.IsShow = field.NewInt32(tableName, "is_show")
	_laSystemAuthMenu.IsDisable = field.NewInt32(tableName, "is_disable")
	_laSystemAuthMenu.CreateTime = field.NewInt64(tableName, "create_time")
	_laSystemAuthMenu.UpdateTime = field.NewInt64(tableName, "update_time")

	_laSystemAuthMenu.fillFieldMap()

	return _laSystemAuthMenu
}

type laSystemAuthMenu struct {
	laSystemAuthMenuDo

	ALL        field.Asterisk
	ID         field.Int32  // 主键
	Pid        field.Int32  // 上级菜单
	MenuType   field.String // 权限类型: M=目录，C=菜单，A=按钮
	MenuName   field.String // 菜单名称
	MenuIcon   field.String // 菜单图标
	MenuSort   field.Int32  // 菜单排序
	Perms      field.String // 权限标识
	Paths      field.String // 路由地址
	Component  field.String // 前端组件
	Selected   field.String // 选中路径
	Params     field.String // 路由参数
	IsCache    field.Int32  // 是否缓存: 0=否, 1=是
	IsShow     field.Int32  // 是否显示: 0=否, 1=是
	IsDisable  field.Int32  // 是否禁用: 0=否, 1=是
	CreateTime field.Int64  // 创建时间
	UpdateTime field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (l laSystemAuthMenu) Table(newTableName string) *laSystemAuthMenu {
	l.laSystemAuthMenuDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l laSystemAuthMenu) As(alias string) *laSystemAuthMenu {
	l.laSystemAuthMenuDo.DO = *(l.laSystemAuthMenuDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *laSystemAuthMenu) updateTableName(table string) *laSystemAuthMenu {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Pid = field.NewInt32(table, "pid")
	l.MenuType = field.NewString(table, "menu_type")
	l.MenuName = field.NewString(table, "menu_name")
	l.MenuIcon = field.NewString(table, "menu_icon")
	l.MenuSort = field.NewInt32(table, "menu_sort")
	l.Perms = field.NewString(table, "perms")
	l.Paths = field.NewString(table, "paths")
	l.Component = field.NewString(table, "component")
	l.Selected = field.NewString(table, "selected")
	l.Params = field.NewString(table, "params")
	l.IsCache = field.NewInt32(table, "is_cache")
	l.IsShow = field.NewInt32(table, "is_show")
	l.IsDisable = field.NewInt32(table, "is_disable")
	l.CreateTime = field.NewInt64(table, "create_time")
	l.UpdateTime = field.NewInt64(table, "update_time")

	l.fillFieldMap()

	return l
}

func (l *laSystemAuthMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *laSystemAuthMenu) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["id"] = l.ID
	l.fieldMap["pid"] = l.Pid
	l.fieldMap["menu_type"] = l.MenuType
	l.fieldMap["menu_name"] = l.MenuName
	l.fieldMap["menu_icon"] = l.MenuIcon
	l.fieldMap["menu_sort"] = l.MenuSort
	l.fieldMap["perms"] = l.Perms
	l.fieldMap["paths"] = l.Paths
	l.fieldMap["component"] = l.Component
	l.fieldMap["selected"] = l.Selected
	l.fieldMap["params"] = l.Params
	l.fieldMap["is_cache"] = l.IsCache
	l.fieldMap["is_show"] = l.IsShow
	l.fieldMap["is_disable"] = l.IsDisable
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["update_time"] = l.UpdateTime

}

func (l laSystemAuthMenu) clone(db *gorm.DB) laSystemAuthMenu {
	l.laSystemAuthMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l laSystemAuthMenu) replaceDB(db *gorm.DB) laSystemAuthMenu {
	l.laSystemAuthMenuDo.ReplaceDB(db)
	return l
}

type laSystemAuthMenuDo struct{ gen.DO }

func (l laSystemAuthMenuDo) Debug() *laSystemAuthMenuDo {
	return l.withDO(l.DO.Debug())
}

func (l laSystemAuthMenuDo) WithContext(ctx context.Context) *laSystemAuthMenuDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l laSystemAuthMenuDo) ReadDB() *laSystemAuthMenuDo {
	return l.Clauses(dbresolver.Read)
}

func (l laSystemAuthMenuDo) WriteDB() *laSystemAuthMenuDo {
	return l.Clauses(dbresolver.Write)
}

func (l laSystemAuthMenuDo) Session(config *gorm.Session) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Session(config))
}

func (l laSystemAuthMenuDo) Clauses(conds ...clause.Expression) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l laSystemAuthMenuDo) Returning(value interface{}, columns ...string) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l laSystemAuthMenuDo) Not(conds ...gen.Condition) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l laSystemAuthMenuDo) Or(conds ...gen.Condition) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l laSystemAuthMenuDo) Select(conds ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l laSystemAuthMenuDo) Where(conds ...gen.Condition) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l laSystemAuthMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *laSystemAuthMenuDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l laSystemAuthMenuDo) Order(conds ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l laSystemAuthMenuDo) Distinct(cols ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l laSystemAuthMenuDo) Omit(cols ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l laSystemAuthMenuDo) Join(table schema.Tabler, on ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l laSystemAuthMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l laSystemAuthMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l laSystemAuthMenuDo) Group(cols ...field.Expr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l laSystemAuthMenuDo) Having(conds ...gen.Condition) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l laSystemAuthMenuDo) Limit(limit int) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l laSystemAuthMenuDo) Offset(offset int) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l laSystemAuthMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l laSystemAuthMenuDo) Unscoped() *laSystemAuthMenuDo {
	return l.withDO(l.DO.Unscoped())
}

func (l laSystemAuthMenuDo) Create(values ...*model.LaSystemAuthMenu) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l laSystemAuthMenuDo) CreateInBatches(values []*model.LaSystemAuthMenu, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l laSystemAuthMenuDo) Save(values ...*model.LaSystemAuthMenu) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l laSystemAuthMenuDo) First() (*model.LaSystemAuthMenu, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthMenu), nil
	}
}

func (l laSystemAuthMenuDo) Take() (*model.LaSystemAuthMenu, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthMenu), nil
	}
}

func (l laSystemAuthMenuDo) Last() (*model.LaSystemAuthMenu, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthMenu), nil
	}
}

func (l laSystemAuthMenuDo) Find() ([]*model.LaSystemAuthMenu, error) {
	result, err := l.DO.Find()
	return result.([]*model.LaSystemAuthMenu), err
}

func (l laSystemAuthMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LaSystemAuthMenu, err error) {
	buf := make([]*model.LaSystemAuthMenu, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l laSystemAuthMenuDo) FindInBatches(result *[]*model.LaSystemAuthMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l laSystemAuthMenuDo) Attrs(attrs ...field.AssignExpr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l laSystemAuthMenuDo) Assign(attrs ...field.AssignExpr) *laSystemAuthMenuDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l laSystemAuthMenuDo) Joins(fields ...field.RelationField) *laSystemAuthMenuDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l laSystemAuthMenuDo) Preload(fields ...field.RelationField) *laSystemAuthMenuDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l laSystemAuthMenuDo) FirstOrInit() (*model.LaSystemAuthMenu, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthMenu), nil
	}
}

func (l laSystemAuthMenuDo) FirstOrCreate() (*model.LaSystemAuthMenu, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthMenu), nil
	}
}

func (l laSystemAuthMenuDo) FindByPage(offset int, limit int) (result []*model.LaSystemAuthMenu, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l laSystemAuthMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l laSystemAuthMenuDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l laSystemAuthMenuDo) Delete(models ...*model.LaSystemAuthMenu) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *laSystemAuthMenuDo) withDO(do gen.Dao) *laSystemAuthMenuDo {
	l.DO = *do.(*gen.DO)
	return l
}
