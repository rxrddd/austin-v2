// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newLaSystemAuthRole(db *gorm.DB, opts ...gen.DOOption) laSystemAuthRole {
	_laSystemAuthRole := laSystemAuthRole{}

	_laSystemAuthRole.laSystemAuthRoleDo.UseDB(db, opts...)
	_laSystemAuthRole.laSystemAuthRoleDo.UseModel(&model.LaSystemAuthRole{})

	tableName := _laSystemAuthRole.laSystemAuthRoleDo.TableName()
	_laSystemAuthRole.ALL = field.NewAsterisk(tableName)
	_laSystemAuthRole.ID = field.NewInt32(tableName, "id")
	_laSystemAuthRole.Name = field.NewString(tableName, "name")
	_laSystemAuthRole.Remark = field.NewString(tableName, "remark")
	_laSystemAuthRole.Sort = field.NewInt32(tableName, "sort")
	_laSystemAuthRole.IsDisable = field.NewInt32(tableName, "is_disable")
	_laSystemAuthRole.CreateTime = field.NewInt64(tableName, "create_time")
	_laSystemAuthRole.UpdateTime = field.NewInt64(tableName, "update_time")
	_laSystemAuthRole.MenuIds = field.NewField(tableName, "menu_ids")

	_laSystemAuthRole.fillFieldMap()

	return _laSystemAuthRole
}

type laSystemAuthRole struct {
	laSystemAuthRoleDo

	ALL        field.Asterisk
	ID         field.Int32  // 主键
	Name       field.String // 角色名称
	Remark     field.String // 备注信息
	Sort       field.Int32  // 角色排序
	IsDisable  field.Int32  // 是否禁用: 0=否, 1=是
	CreateTime field.Int64  // 创建时间
	UpdateTime field.Int64  // 更新时间
	MenuIds    field.Field

	fieldMap map[string]field.Expr
}

func (l laSystemAuthRole) Table(newTableName string) *laSystemAuthRole {
	l.laSystemAuthRoleDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l laSystemAuthRole) As(alias string) *laSystemAuthRole {
	l.laSystemAuthRoleDo.DO = *(l.laSystemAuthRoleDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *laSystemAuthRole) updateTableName(table string) *laSystemAuthRole {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")
	l.Remark = field.NewString(table, "remark")
	l.Sort = field.NewInt32(table, "sort")
	l.IsDisable = field.NewInt32(table, "is_disable")
	l.CreateTime = field.NewInt64(table, "create_time")
	l.UpdateTime = field.NewInt64(table, "update_time")
	l.MenuIds = field.NewField(table, "menu_ids")

	l.fillFieldMap()

	return l
}

func (l *laSystemAuthRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *laSystemAuthRole) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 8)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["remark"] = l.Remark
	l.fieldMap["sort"] = l.Sort
	l.fieldMap["is_disable"] = l.IsDisable
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["update_time"] = l.UpdateTime
	l.fieldMap["menu_ids"] = l.MenuIds
}

func (l laSystemAuthRole) clone(db *gorm.DB) laSystemAuthRole {
	l.laSystemAuthRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l laSystemAuthRole) replaceDB(db *gorm.DB) laSystemAuthRole {
	l.laSystemAuthRoleDo.ReplaceDB(db)
	return l
}

type laSystemAuthRoleDo struct{ gen.DO }

func (l laSystemAuthRoleDo) Debug() *laSystemAuthRoleDo {
	return l.withDO(l.DO.Debug())
}

func (l laSystemAuthRoleDo) WithContext(ctx context.Context) *laSystemAuthRoleDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l laSystemAuthRoleDo) ReadDB() *laSystemAuthRoleDo {
	return l.Clauses(dbresolver.Read)
}

func (l laSystemAuthRoleDo) WriteDB() *laSystemAuthRoleDo {
	return l.Clauses(dbresolver.Write)
}

func (l laSystemAuthRoleDo) Session(config *gorm.Session) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Session(config))
}

func (l laSystemAuthRoleDo) Clauses(conds ...clause.Expression) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l laSystemAuthRoleDo) Returning(value interface{}, columns ...string) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l laSystemAuthRoleDo) Not(conds ...gen.Condition) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l laSystemAuthRoleDo) Or(conds ...gen.Condition) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l laSystemAuthRoleDo) Select(conds ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l laSystemAuthRoleDo) Where(conds ...gen.Condition) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l laSystemAuthRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *laSystemAuthRoleDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l laSystemAuthRoleDo) Order(conds ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l laSystemAuthRoleDo) Distinct(cols ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l laSystemAuthRoleDo) Omit(cols ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l laSystemAuthRoleDo) Join(table schema.Tabler, on ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l laSystemAuthRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l laSystemAuthRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l laSystemAuthRoleDo) Group(cols ...field.Expr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l laSystemAuthRoleDo) Having(conds ...gen.Condition) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l laSystemAuthRoleDo) Limit(limit int) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l laSystemAuthRoleDo) Offset(offset int) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l laSystemAuthRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l laSystemAuthRoleDo) Unscoped() *laSystemAuthRoleDo {
	return l.withDO(l.DO.Unscoped())
}

func (l laSystemAuthRoleDo) Create(values ...*model.LaSystemAuthRole) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l laSystemAuthRoleDo) CreateInBatches(values []*model.LaSystemAuthRole, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l laSystemAuthRoleDo) Save(values ...*model.LaSystemAuthRole) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l laSystemAuthRoleDo) First() (*model.LaSystemAuthRole, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthRole), nil
	}
}

func (l laSystemAuthRoleDo) Take() (*model.LaSystemAuthRole, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthRole), nil
	}
}

func (l laSystemAuthRoleDo) Last() (*model.LaSystemAuthRole, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthRole), nil
	}
}

func (l laSystemAuthRoleDo) Find() ([]*model.LaSystemAuthRole, error) {
	result, err := l.DO.Find()
	return result.([]*model.LaSystemAuthRole), err
}

func (l laSystemAuthRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LaSystemAuthRole, err error) {
	buf := make([]*model.LaSystemAuthRole, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l laSystemAuthRoleDo) FindInBatches(result *[]*model.LaSystemAuthRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l laSystemAuthRoleDo) Attrs(attrs ...field.AssignExpr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l laSystemAuthRoleDo) Assign(attrs ...field.AssignExpr) *laSystemAuthRoleDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l laSystemAuthRoleDo) Joins(fields ...field.RelationField) *laSystemAuthRoleDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l laSystemAuthRoleDo) Preload(fields ...field.RelationField) *laSystemAuthRoleDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l laSystemAuthRoleDo) FirstOrInit() (*model.LaSystemAuthRole, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthRole), nil
	}
}

func (l laSystemAuthRoleDo) FirstOrCreate() (*model.LaSystemAuthRole, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthRole), nil
	}
}

func (l laSystemAuthRoleDo) FindByPage(offset int, limit int) (result []*model.LaSystemAuthRole, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l laSystemAuthRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l laSystemAuthRoleDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l laSystemAuthRoleDo) Delete(models ...*model.LaSystemAuthRole) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *laSystemAuthRoleDo) withDO(do gen.Dao) *laSystemAuthRoleDo {
	l.DO = *do.(*gen.DO)
	return l
}
