// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newMessageTemplate(db *gorm.DB, opts ...gen.DOOption) messageTemplate {
	_messageTemplate := messageTemplate{}

	_messageTemplate.messageTemplateDo.UseDB(db, opts...)
	_messageTemplate.messageTemplateDo.UseModel(&model.MessageTemplate{})

	tableName := _messageTemplate.messageTemplateDo.TableName()
	_messageTemplate.ALL = field.NewAsterisk(tableName)
	_messageTemplate.ID = field.NewInt64(tableName, "id")
	_messageTemplate.Name = field.NewString(tableName, "name")
	_messageTemplate.AuditStatus = field.NewInt32(tableName, "audit_status")
	_messageTemplate.IDType = field.NewInt32(tableName, "id_type")
	_messageTemplate.SendChannel = field.NewInt32(tableName, "send_channel")
	_messageTemplate.TemplateType = field.NewInt32(tableName, "template_type")
	_messageTemplate.MsgType = field.NewInt32(tableName, "msg_type")
	_messageTemplate.ShieldType = field.NewInt32(tableName, "shield_type")
	_messageTemplate.MsgContent = field.NewString(tableName, "msg_content")
	_messageTemplate.SendAccount = field.NewInt32(tableName, "send_account")
	_messageTemplate.CreateBy = field.NewString(tableName, "create_by")
	_messageTemplate.UpdateBy = field.NewString(tableName, "update_by")
	_messageTemplate.Status = field.NewInt32(tableName, "status")
	_messageTemplate.CreateAt = field.NewInt64(tableName, "create_at")
	_messageTemplate.UpdateAt = field.NewInt64(tableName, "update_at")
	_messageTemplate.DeduplicationConfig = field.NewString(tableName, "deduplication_config")
	_messageTemplate.TemplateSn = field.NewString(tableName, "template_sn")
	_messageTemplate.SmsChannel = field.NewString(tableName, "sms_channel")
	_messageTemplate.SendAccountItem = messageTemplateHasOneSendAccountItem{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SendAccountItem", "model.SendAccount"),
	}

	_messageTemplate.fillFieldMap()

	return _messageTemplate
}

type messageTemplate struct {
	messageTemplateDo

	ALL                 field.Asterisk
	ID                  field.Int64
	Name                field.String // 标题
	AuditStatus         field.Int32  // 当前消息审核状态： 10.待审核 20.审核成功 30.被拒绝
	IDType              field.Int32  // 消息的发送ID类型：10. userId 20.did 30.手机号 40.openId 50.email 60.企业微信userId
	SendChannel         field.Int32  // 消息发送渠道：10.IM 20.Push 30.短信 40.Email 50.公众号 60.小程序 70.企业微信
	TemplateType        field.Int32  // 10.运营类 20.技术类接口调用
	MsgType             field.Int32  // 10.通知类消息 20.营销类消息 30.验证码类消息
	ShieldType          field.Int32  // 10.夜间不屏蔽 20.夜间屏蔽 30.夜间屏蔽(次日早上9点发送)
	MsgContent          field.String // 消息内容 占位符用{$var}表示
	SendAccount         field.Int32  // 发送账号 一个渠道下可存在多个账号
	CreateBy            field.String // 创建者
	UpdateBy            field.String // 更新者
	Status              field.Int32  // 是否删除：0.删除 1.正常 2.禁用
	CreateAt            field.Int64  // 创建时间
	UpdateAt            field.Int64  // 更新时间
	DeduplicationConfig field.String // 数据去重配置
	TemplateSn          field.String // 发送消息的模版ID
	SmsChannel          field.String // 短信渠道 send_channel=30的时候有用  tencent腾讯云  aliyun阿里云 yunpian云片
	SendAccountItem     messageTemplateHasOneSendAccountItem

	fieldMap map[string]field.Expr
}

func (m messageTemplate) Table(newTableName string) *messageTemplate {
	m.messageTemplateDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m messageTemplate) As(alias string) *messageTemplate {
	m.messageTemplateDo.DO = *(m.messageTemplateDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *messageTemplate) updateTableName(table string) *messageTemplate {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Name = field.NewString(table, "name")
	m.AuditStatus = field.NewInt32(table, "audit_status")
	m.IDType = field.NewInt32(table, "id_type")
	m.SendChannel = field.NewInt32(table, "send_channel")
	m.TemplateType = field.NewInt32(table, "template_type")
	m.MsgType = field.NewInt32(table, "msg_type")
	m.ShieldType = field.NewInt32(table, "shield_type")
	m.MsgContent = field.NewString(table, "msg_content")
	m.SendAccount = field.NewInt32(table, "send_account")
	m.CreateBy = field.NewString(table, "create_by")
	m.UpdateBy = field.NewString(table, "update_by")
	m.Status = field.NewInt32(table, "status")
	m.CreateAt = field.NewInt64(table, "create_at")
	m.UpdateAt = field.NewInt64(table, "update_at")
	m.DeduplicationConfig = field.NewString(table, "deduplication_config")
	m.TemplateSn = field.NewString(table, "template_sn")
	m.SmsChannel = field.NewString(table, "sms_channel")

	m.fillFieldMap()

	return m
}

func (m *messageTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *messageTemplate) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 19)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["audit_status"] = m.AuditStatus
	m.fieldMap["id_type"] = m.IDType
	m.fieldMap["send_channel"] = m.SendChannel
	m.fieldMap["template_type"] = m.TemplateType
	m.fieldMap["msg_type"] = m.MsgType
	m.fieldMap["shield_type"] = m.ShieldType
	m.fieldMap["msg_content"] = m.MsgContent
	m.fieldMap["send_account"] = m.SendAccount
	m.fieldMap["create_by"] = m.CreateBy
	m.fieldMap["update_by"] = m.UpdateBy
	m.fieldMap["status"] = m.Status
	m.fieldMap["create_at"] = m.CreateAt
	m.fieldMap["update_at"] = m.UpdateAt
	m.fieldMap["deduplication_config"] = m.DeduplicationConfig
	m.fieldMap["template_sn"] = m.TemplateSn
	m.fieldMap["sms_channel"] = m.SmsChannel

}

func (m messageTemplate) clone(db *gorm.DB) messageTemplate {
	m.messageTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m messageTemplate) replaceDB(db *gorm.DB) messageTemplate {
	m.messageTemplateDo.ReplaceDB(db)
	return m
}

type messageTemplateHasOneSendAccountItem struct {
	db *gorm.DB

	field.RelationField
}

func (a messageTemplateHasOneSendAccountItem) Where(conds ...field.Expr) *messageTemplateHasOneSendAccountItem {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a messageTemplateHasOneSendAccountItem) WithContext(ctx context.Context) *messageTemplateHasOneSendAccountItem {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a messageTemplateHasOneSendAccountItem) Model(m *model.MessageTemplate) *messageTemplateHasOneSendAccountItemTx {
	return &messageTemplateHasOneSendAccountItemTx{a.db.Model(m).Association(a.Name())}
}

type messageTemplateHasOneSendAccountItemTx struct{ tx *gorm.Association }

func (a messageTemplateHasOneSendAccountItemTx) Find() (result *model.SendAccount, err error) {
	return result, a.tx.Find(&result)
}

func (a messageTemplateHasOneSendAccountItemTx) Append(values ...*model.SendAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a messageTemplateHasOneSendAccountItemTx) Replace(values ...*model.SendAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a messageTemplateHasOneSendAccountItemTx) Delete(values ...*model.SendAccount) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a messageTemplateHasOneSendAccountItemTx) Clear() error {
	return a.tx.Clear()
}

func (a messageTemplateHasOneSendAccountItemTx) Count() int64 {
	return a.tx.Count()
}

type messageTemplateDo struct{ gen.DO }

func (m messageTemplateDo) Debug() *messageTemplateDo {
	return m.withDO(m.DO.Debug())
}

func (m messageTemplateDo) WithContext(ctx context.Context) *messageTemplateDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageTemplateDo) ReadDB() *messageTemplateDo {
	return m.Clauses(dbresolver.Read)
}

func (m messageTemplateDo) WriteDB() *messageTemplateDo {
	return m.Clauses(dbresolver.Write)
}

func (m messageTemplateDo) Session(config *gorm.Session) *messageTemplateDo {
	return m.withDO(m.DO.Session(config))
}

func (m messageTemplateDo) Clauses(conds ...clause.Expression) *messageTemplateDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageTemplateDo) Returning(value interface{}, columns ...string) *messageTemplateDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m messageTemplateDo) Not(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageTemplateDo) Or(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageTemplateDo) Select(conds ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageTemplateDo) Where(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *messageTemplateDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m messageTemplateDo) Order(conds ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageTemplateDo) Distinct(cols ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageTemplateDo) Omit(cols ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageTemplateDo) Join(table schema.Tabler, on ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageTemplateDo) Group(cols ...field.Expr) *messageTemplateDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageTemplateDo) Having(conds ...gen.Condition) *messageTemplateDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageTemplateDo) Limit(limit int) *messageTemplateDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageTemplateDo) Offset(offset int) *messageTemplateDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageTemplateDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageTemplateDo) Unscoped() *messageTemplateDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageTemplateDo) Create(values ...*model.MessageTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageTemplateDo) CreateInBatches(values []*model.MessageTemplate, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageTemplateDo) Save(values ...*model.MessageTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageTemplateDo) First() (*model.MessageTemplate, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) Take() (*model.MessageTemplate, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) Last() (*model.MessageTemplate, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) Find() ([]*model.MessageTemplate, error) {
	result, err := m.DO.Find()
	return result.([]*model.MessageTemplate), err
}

func (m messageTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MessageTemplate, err error) {
	buf := make([]*model.MessageTemplate, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageTemplateDo) FindInBatches(result *[]*model.MessageTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageTemplateDo) Attrs(attrs ...field.AssignExpr) *messageTemplateDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageTemplateDo) Assign(attrs ...field.AssignExpr) *messageTemplateDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageTemplateDo) Joins(fields ...field.RelationField) *messageTemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m messageTemplateDo) Preload(fields ...field.RelationField) *messageTemplateDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m messageTemplateDo) FirstOrInit() (*model.MessageTemplate, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) FirstOrCreate() (*model.MessageTemplate, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MessageTemplate), nil
	}
}

func (m messageTemplateDo) FindByPage(offset int, limit int) (result []*model.MessageTemplate, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m messageTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m messageTemplateDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m messageTemplateDo) Delete(models ...*model.MessageTemplate) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *messageTemplateDo) withDO(do gen.Dao) *messageTemplateDo {
	m.DO = *do.(*gen.DO)
	return m
}
