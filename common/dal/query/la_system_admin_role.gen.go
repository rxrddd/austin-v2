// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newLaSystemAdminRole(db *gorm.DB, opts ...gen.DOOption) laSystemAdminRole {
	_laSystemAdminRole := laSystemAdminRole{}

	_laSystemAdminRole.laSystemAdminRoleDo.UseDB(db, opts...)
	_laSystemAdminRole.laSystemAdminRoleDo.UseModel(&model.LaSystemAdminRole{})

	tableName := _laSystemAdminRole.laSystemAdminRoleDo.TableName()
	_laSystemAdminRole.ALL = field.NewAsterisk(tableName)
	_laSystemAdminRole.RoleID = field.NewInt32(tableName, "role_id")
	_laSystemAdminRole.AdminID = field.NewInt32(tableName, "admin_id")
	_laSystemAdminRole.Role = laSystemAdminRoleHasOneRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Role", "model.LaSystemAuthRole"),
	}

	_laSystemAdminRole.fillFieldMap()

	return _laSystemAdminRole
}

type laSystemAdminRole struct {
	laSystemAdminRoleDo

	ALL     field.Asterisk
	RoleID  field.Int32 // 角色ID
	AdminID field.Int32 // 用户id
	Role    laSystemAdminRoleHasOneRole

	fieldMap map[string]field.Expr
}

func (l laSystemAdminRole) Table(newTableName string) *laSystemAdminRole {
	l.laSystemAdminRoleDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l laSystemAdminRole) As(alias string) *laSystemAdminRole {
	l.laSystemAdminRoleDo.DO = *(l.laSystemAdminRoleDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *laSystemAdminRole) updateTableName(table string) *laSystemAdminRole {
	l.ALL = field.NewAsterisk(table)
	l.RoleID = field.NewInt32(table, "role_id")
	l.AdminID = field.NewInt32(table, "admin_id")

	l.fillFieldMap()

	return l
}

func (l *laSystemAdminRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *laSystemAdminRole) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["role_id"] = l.RoleID
	l.fieldMap["admin_id"] = l.AdminID

}

func (l laSystemAdminRole) clone(db *gorm.DB) laSystemAdminRole {
	l.laSystemAdminRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l laSystemAdminRole) replaceDB(db *gorm.DB) laSystemAdminRole {
	l.laSystemAdminRoleDo.ReplaceDB(db)
	return l
}

type laSystemAdminRoleHasOneRole struct {
	db *gorm.DB

	field.RelationField
}

func (a laSystemAdminRoleHasOneRole) Where(conds ...field.Expr) *laSystemAdminRoleHasOneRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laSystemAdminRoleHasOneRole) WithContext(ctx context.Context) *laSystemAdminRoleHasOneRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laSystemAdminRoleHasOneRole) Model(m *model.LaSystemAdminRole) *laSystemAdminRoleHasOneRoleTx {
	return &laSystemAdminRoleHasOneRoleTx{a.db.Model(m).Association(a.Name())}
}

type laSystemAdminRoleHasOneRoleTx struct{ tx *gorm.Association }

func (a laSystemAdminRoleHasOneRoleTx) Find() (result *model.LaSystemAuthRole, err error) {
	return result, a.tx.Find(&result)
}

func (a laSystemAdminRoleHasOneRoleTx) Append(values ...*model.LaSystemAuthRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laSystemAdminRoleHasOneRoleTx) Replace(values ...*model.LaSystemAuthRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laSystemAdminRoleHasOneRoleTx) Delete(values ...*model.LaSystemAuthRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laSystemAdminRoleHasOneRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a laSystemAdminRoleHasOneRoleTx) Count() int64 {
	return a.tx.Count()
}

type laSystemAdminRoleDo struct{ gen.DO }

func (l laSystemAdminRoleDo) Debug() *laSystemAdminRoleDo {
	return l.withDO(l.DO.Debug())
}

func (l laSystemAdminRoleDo) WithContext(ctx context.Context) *laSystemAdminRoleDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l laSystemAdminRoleDo) ReadDB() *laSystemAdminRoleDo {
	return l.Clauses(dbresolver.Read)
}

func (l laSystemAdminRoleDo) WriteDB() *laSystemAdminRoleDo {
	return l.Clauses(dbresolver.Write)
}

func (l laSystemAdminRoleDo) Session(config *gorm.Session) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Session(config))
}

func (l laSystemAdminRoleDo) Clauses(conds ...clause.Expression) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l laSystemAdminRoleDo) Returning(value interface{}, columns ...string) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l laSystemAdminRoleDo) Not(conds ...gen.Condition) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l laSystemAdminRoleDo) Or(conds ...gen.Condition) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l laSystemAdminRoleDo) Select(conds ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l laSystemAdminRoleDo) Where(conds ...gen.Condition) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l laSystemAdminRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *laSystemAdminRoleDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l laSystemAdminRoleDo) Order(conds ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l laSystemAdminRoleDo) Distinct(cols ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l laSystemAdminRoleDo) Omit(cols ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l laSystemAdminRoleDo) Join(table schema.Tabler, on ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l laSystemAdminRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l laSystemAdminRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l laSystemAdminRoleDo) Group(cols ...field.Expr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l laSystemAdminRoleDo) Having(conds ...gen.Condition) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l laSystemAdminRoleDo) Limit(limit int) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l laSystemAdminRoleDo) Offset(offset int) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l laSystemAdminRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l laSystemAdminRoleDo) Unscoped() *laSystemAdminRoleDo {
	return l.withDO(l.DO.Unscoped())
}

func (l laSystemAdminRoleDo) Create(values ...*model.LaSystemAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l laSystemAdminRoleDo) CreateInBatches(values []*model.LaSystemAdminRole, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l laSystemAdminRoleDo) Save(values ...*model.LaSystemAdminRole) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l laSystemAdminRoleDo) First() (*model.LaSystemAdminRole, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAdminRole), nil
	}
}

func (l laSystemAdminRoleDo) Take() (*model.LaSystemAdminRole, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAdminRole), nil
	}
}

func (l laSystemAdminRoleDo) Last() (*model.LaSystemAdminRole, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAdminRole), nil
	}
}

func (l laSystemAdminRoleDo) Find() ([]*model.LaSystemAdminRole, error) {
	result, err := l.DO.Find()
	return result.([]*model.LaSystemAdminRole), err
}

func (l laSystemAdminRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LaSystemAdminRole, err error) {
	buf := make([]*model.LaSystemAdminRole, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l laSystemAdminRoleDo) FindInBatches(result *[]*model.LaSystemAdminRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l laSystemAdminRoleDo) Attrs(attrs ...field.AssignExpr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l laSystemAdminRoleDo) Assign(attrs ...field.AssignExpr) *laSystemAdminRoleDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l laSystemAdminRoleDo) Joins(fields ...field.RelationField) *laSystemAdminRoleDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l laSystemAdminRoleDo) Preload(fields ...field.RelationField) *laSystemAdminRoleDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l laSystemAdminRoleDo) FirstOrInit() (*model.LaSystemAdminRole, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAdminRole), nil
	}
}

func (l laSystemAdminRoleDo) FirstOrCreate() (*model.LaSystemAdminRole, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAdminRole), nil
	}
}

func (l laSystemAdminRoleDo) FindByPage(offset int, limit int) (result []*model.LaSystemAdminRole, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l laSystemAdminRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l laSystemAdminRoleDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l laSystemAdminRoleDo) Delete(models ...*model.LaSystemAdminRole) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *laSystemAdminRoleDo) withDO(do gen.Dao) *laSystemAdminRoleDo {
	l.DO = *do.(*gen.DO)
	return l
}
