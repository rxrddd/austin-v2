// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newSendAccount(db *gorm.DB, opts ...gen.DOOption) sendAccount {
	_sendAccount := sendAccount{}

	_sendAccount.sendAccountDo.UseDB(db, opts...)
	_sendAccount.sendAccountDo.UseModel(&model.SendAccount{})

	tableName := _sendAccount.sendAccountDo.TableName()
	_sendAccount.ALL = field.NewAsterisk(tableName)
	_sendAccount.ID = field.NewInt32(tableName, "id")
	_sendAccount.SendChanel = field.NewString(tableName, "send_chanel")
	_sendAccount.Config = field.NewString(tableName, "config")
	_sendAccount.Title = field.NewString(tableName, "title")

	_sendAccount.fillFieldMap()

	return _sendAccount
}

type sendAccount struct {
	sendAccountDo

	ALL        field.Asterisk
	ID         field.Int32
	SendChanel field.String // 发送渠道
	Config     field.String // 账户配置
	Title      field.String // 账号名称

	fieldMap map[string]field.Expr
}

func (s sendAccount) Table(newTableName string) *sendAccount {
	s.sendAccountDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sendAccount) As(alias string) *sendAccount {
	s.sendAccountDo.DO = *(s.sendAccountDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sendAccount) updateTableName(table string) *sendAccount {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.SendChanel = field.NewString(table, "send_chanel")
	s.Config = field.NewString(table, "config")
	s.Title = field.NewString(table, "title")

	s.fillFieldMap()

	return s
}

func (s *sendAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sendAccount) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["send_chanel"] = s.SendChanel
	s.fieldMap["config"] = s.Config
	s.fieldMap["title"] = s.Title
}

func (s sendAccount) clone(db *gorm.DB) sendAccount {
	s.sendAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sendAccount) replaceDB(db *gorm.DB) sendAccount {
	s.sendAccountDo.ReplaceDB(db)
	return s
}

type sendAccountDo struct{ gen.DO }

func (s sendAccountDo) Debug() *sendAccountDo {
	return s.withDO(s.DO.Debug())
}

func (s sendAccountDo) WithContext(ctx context.Context) *sendAccountDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sendAccountDo) ReadDB() *sendAccountDo {
	return s.Clauses(dbresolver.Read)
}

func (s sendAccountDo) WriteDB() *sendAccountDo {
	return s.Clauses(dbresolver.Write)
}

func (s sendAccountDo) Session(config *gorm.Session) *sendAccountDo {
	return s.withDO(s.DO.Session(config))
}

func (s sendAccountDo) Clauses(conds ...clause.Expression) *sendAccountDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sendAccountDo) Returning(value interface{}, columns ...string) *sendAccountDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sendAccountDo) Not(conds ...gen.Condition) *sendAccountDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sendAccountDo) Or(conds ...gen.Condition) *sendAccountDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sendAccountDo) Select(conds ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sendAccountDo) Where(conds ...gen.Condition) *sendAccountDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sendAccountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sendAccountDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sendAccountDo) Order(conds ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sendAccountDo) Distinct(cols ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sendAccountDo) Omit(cols ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sendAccountDo) Join(table schema.Tabler, on ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sendAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sendAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sendAccountDo) Group(cols ...field.Expr) *sendAccountDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sendAccountDo) Having(conds ...gen.Condition) *sendAccountDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sendAccountDo) Limit(limit int) *sendAccountDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sendAccountDo) Offset(offset int) *sendAccountDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sendAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sendAccountDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sendAccountDo) Unscoped() *sendAccountDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sendAccountDo) Create(values ...*model.SendAccount) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sendAccountDo) CreateInBatches(values []*model.SendAccount, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sendAccountDo) Save(values ...*model.SendAccount) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sendAccountDo) First() (*model.SendAccount, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SendAccount), nil
	}
}

func (s sendAccountDo) Take() (*model.SendAccount, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SendAccount), nil
	}
}

func (s sendAccountDo) Last() (*model.SendAccount, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SendAccount), nil
	}
}

func (s sendAccountDo) Find() ([]*model.SendAccount, error) {
	result, err := s.DO.Find()
	return result.([]*model.SendAccount), err
}

func (s sendAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SendAccount, err error) {
	buf := make([]*model.SendAccount, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sendAccountDo) FindInBatches(result *[]*model.SendAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sendAccountDo) Attrs(attrs ...field.AssignExpr) *sendAccountDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sendAccountDo) Assign(attrs ...field.AssignExpr) *sendAccountDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sendAccountDo) Joins(fields ...field.RelationField) *sendAccountDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sendAccountDo) Preload(fields ...field.RelationField) *sendAccountDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sendAccountDo) FirstOrInit() (*model.SendAccount, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SendAccount), nil
	}
}

func (s sendAccountDo) FirstOrCreate() (*model.SendAccount, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SendAccount), nil
	}
}

func (s sendAccountDo) FindByPage(offset int, limit int) (result []*model.SendAccount, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sendAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sendAccountDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sendAccountDo) Delete(models ...*model.SendAccount) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sendAccountDo) withDO(do gen.Dao) *sendAccountDo {
	s.DO = *do.(*gen.DO)
	return s
}
