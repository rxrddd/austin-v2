// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newSmsRecord(db *gorm.DB, opts ...gen.DOOption) smsRecord {
	_smsRecord := smsRecord{}

	_smsRecord.smsRecordDo.UseDB(db, opts...)
	_smsRecord.smsRecordDo.UseModel(&model.SmsRecord{})

	tableName := _smsRecord.smsRecordDo.TableName()
	_smsRecord.ALL = field.NewAsterisk(tableName)
	_smsRecord.ID = field.NewInt64(tableName, "id")
	_smsRecord.MessageTemplateID = field.NewInt64(tableName, "message_template_id")
	_smsRecord.Phone = field.NewInt64(tableName, "phone")
	_smsRecord.SupplierID = field.NewInt32(tableName, "supplier_id")
	_smsRecord.SupplierName = field.NewString(tableName, "supplier_name")
	_smsRecord.MsgContent = field.NewString(tableName, "msg_content")
	_smsRecord.SeriesID = field.NewString(tableName, "series_id")
	_smsRecord.ChargingNum = field.NewInt32(tableName, "charging_num")
	_smsRecord.ReportContent = field.NewString(tableName, "report_content")
	_smsRecord.Status = field.NewInt32(tableName, "status")
	_smsRecord.SendDate = field.NewInt32(tableName, "send_date")
	_smsRecord.CreateAt = field.NewInt64(tableName, "create_at")
	_smsRecord.UpdateAt = field.NewInt64(tableName, "update_at")
	_smsRecord.RequestID = field.NewString(tableName, "request_id")
	_smsRecord.BizID = field.NewString(tableName, "biz_id")
	_smsRecord.SendChannel = field.NewString(tableName, "send_channel")

	_smsRecord.fillFieldMap()

	return _smsRecord
}

type smsRecord struct {
	smsRecordDo

	ALL               field.Asterisk
	ID                field.Int64
	MessageTemplateID field.Int64  // 消息模板ID
	Phone             field.Int64  // 手机号
	SupplierID        field.Int32  // 发送短信渠道商的ID
	SupplierName      field.String // 发送短信渠道商的名称
	MsgContent        field.String // 短信发送的内容
	SeriesID          field.String // 下发批次的ID
	ChargingNum       field.Int32  // 计费条数
	ReportContent     field.String // 回执内容
	Status            field.Int32  // 短信状态： 10.发送 20.成功 30.失败
	SendDate          field.Int32  // 发送日期：20211112
	CreateAt          field.Int64  // 创建时间
	UpdateAt          field.Int64  // 更新时间
	RequestID         field.String // 唯一请求 ID
	BizID             field.String // 业务id
	SendChannel       field.String // 短信渠道 tencent腾讯云  aliyun阿里云 yunpian云片

	fieldMap map[string]field.Expr
}

func (s smsRecord) Table(newTableName string) *smsRecord {
	s.smsRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsRecord) As(alias string) *smsRecord {
	s.smsRecordDo.DO = *(s.smsRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsRecord) updateTableName(table string) *smsRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MessageTemplateID = field.NewInt64(table, "message_template_id")
	s.Phone = field.NewInt64(table, "phone")
	s.SupplierID = field.NewInt32(table, "supplier_id")
	s.SupplierName = field.NewString(table, "supplier_name")
	s.MsgContent = field.NewString(table, "msg_content")
	s.SeriesID = field.NewString(table, "series_id")
	s.ChargingNum = field.NewInt32(table, "charging_num")
	s.ReportContent = field.NewString(table, "report_content")
	s.Status = field.NewInt32(table, "status")
	s.SendDate = field.NewInt32(table, "send_date")
	s.CreateAt = field.NewInt64(table, "create_at")
	s.UpdateAt = field.NewInt64(table, "update_at")
	s.RequestID = field.NewString(table, "request_id")
	s.BizID = field.NewString(table, "biz_id")
	s.SendChannel = field.NewString(table, "send_channel")

	s.fillFieldMap()

	return s
}

func (s *smsRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["message_template_id"] = s.MessageTemplateID
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["supplier_id"] = s.SupplierID
	s.fieldMap["supplier_name"] = s.SupplierName
	s.fieldMap["msg_content"] = s.MsgContent
	s.fieldMap["series_id"] = s.SeriesID
	s.fieldMap["charging_num"] = s.ChargingNum
	s.fieldMap["report_content"] = s.ReportContent
	s.fieldMap["status"] = s.Status
	s.fieldMap["send_date"] = s.SendDate
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["request_id"] = s.RequestID
	s.fieldMap["biz_id"] = s.BizID
	s.fieldMap["send_channel"] = s.SendChannel
}

func (s smsRecord) clone(db *gorm.DB) smsRecord {
	s.smsRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsRecord) replaceDB(db *gorm.DB) smsRecord {
	s.smsRecordDo.ReplaceDB(db)
	return s
}

type smsRecordDo struct{ gen.DO }

func (s smsRecordDo) Debug() *smsRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s smsRecordDo) WithContext(ctx context.Context) *smsRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsRecordDo) ReadDB() *smsRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsRecordDo) WriteDB() *smsRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsRecordDo) Session(config *gorm.Session) *smsRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsRecordDo) Clauses(conds ...clause.Expression) *smsRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsRecordDo) Returning(value interface{}, columns ...string) *smsRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsRecordDo) Not(conds ...gen.Condition) *smsRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsRecordDo) Or(conds ...gen.Condition) *smsRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsRecordDo) Select(conds ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsRecordDo) Where(conds ...gen.Condition) *smsRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *smsRecordDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s smsRecordDo) Order(conds ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsRecordDo) Distinct(cols ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsRecordDo) Omit(cols ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsRecordDo) Join(table schema.Tabler, on ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsRecordDo) Group(cols ...field.Expr) *smsRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsRecordDo) Having(conds ...gen.Condition) *smsRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsRecordDo) Limit(limit int) *smsRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsRecordDo) Offset(offset int) *smsRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *smsRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsRecordDo) Unscoped() *smsRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsRecordDo) Create(values ...*model.SmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsRecordDo) CreateInBatches(values []*model.SmsRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsRecordDo) Save(values ...*model.SmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsRecordDo) First() (*model.SmsRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsRecord), nil
	}
}

func (s smsRecordDo) Take() (*model.SmsRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsRecord), nil
	}
}

func (s smsRecordDo) Last() (*model.SmsRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsRecord), nil
	}
}

func (s smsRecordDo) Find() ([]*model.SmsRecord, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsRecord), err
}

func (s smsRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsRecord, err error) {
	buf := make([]*model.SmsRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsRecordDo) FindInBatches(result *[]*model.SmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsRecordDo) Attrs(attrs ...field.AssignExpr) *smsRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsRecordDo) Assign(attrs ...field.AssignExpr) *smsRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsRecordDo) Joins(fields ...field.RelationField) *smsRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsRecordDo) Preload(fields ...field.RelationField) *smsRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsRecordDo) FirstOrInit() (*model.SmsRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsRecord), nil
	}
}

func (s smsRecordDo) FirstOrCreate() (*model.SmsRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsRecord), nil
	}
}

func (s smsRecordDo) FindByPage(offset int, limit int) (result []*model.SmsRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsRecordDo) Delete(models ...*model.SmsRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsRecordDo) withDO(do gen.Dao) *smsRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
