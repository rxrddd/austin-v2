// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"austin-v2/common/dal/model"
)

func newLaSystemAuthAdmin(db *gorm.DB, opts ...gen.DOOption) laSystemAuthAdmin {
	_laSystemAuthAdmin := laSystemAuthAdmin{}

	_laSystemAuthAdmin.laSystemAuthAdminDo.UseDB(db, opts...)
	_laSystemAuthAdmin.laSystemAuthAdminDo.UseModel(&model.LaSystemAuthAdmin{})

	tableName := _laSystemAuthAdmin.laSystemAuthAdminDo.TableName()
	_laSystemAuthAdmin.ALL = field.NewAsterisk(tableName)
	_laSystemAuthAdmin.ID = field.NewInt32(tableName, "id")
	_laSystemAuthAdmin.Username = field.NewString(tableName, "username")
	_laSystemAuthAdmin.Nickname = field.NewString(tableName, "nickname")
	_laSystemAuthAdmin.Password = field.NewString(tableName, "password")
	_laSystemAuthAdmin.Avatar = field.NewString(tableName, "avatar")
	_laSystemAuthAdmin.Role = field.NewField(tableName, "role")
	_laSystemAuthAdmin.Salt = field.NewString(tableName, "salt")
	_laSystemAuthAdmin.Sort = field.NewInt32(tableName, "sort")
	_laSystemAuthAdmin.IsMultipoint = field.NewInt32(tableName, "is_multipoint")
	_laSystemAuthAdmin.IsDisable = field.NewInt32(tableName, "is_disable")
	_laSystemAuthAdmin.IsDelete = field.NewInt32(tableName, "is_delete")
	_laSystemAuthAdmin.LastLoginIP = field.NewString(tableName, "last_login_ip")
	_laSystemAuthAdmin.LastLoginTime = field.NewInt64(tableName, "last_login_time")
	_laSystemAuthAdmin.CreateTime = field.NewInt64(tableName, "create_time")
	_laSystemAuthAdmin.UpdateTime = field.NewInt64(tableName, "update_time")
	_laSystemAuthAdmin.DeleteTime = field.NewInt64(tableName, "delete_time")
	_laSystemAuthAdmin.AuthRoles = laSystemAuthAdminHasManyAuthRoles{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AuthRoles", "model.LaSystemAdminRole"),
		Role: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AuthRoles.Role", "model.LaSystemAuthRole"),
		},
	}

	_laSystemAuthAdmin.fillFieldMap()

	return _laSystemAuthAdmin
}

type laSystemAuthAdmin struct {
	laSystemAuthAdminDo

	ALL           field.Asterisk
	ID            field.Int32  // 主键
	Username      field.String // 用户账号
	Nickname      field.String // 用户昵称
	Password      field.String // 用户密码
	Avatar        field.String // 用户头像
	Role          field.Field  // 角色主键
	Salt          field.String // 加密盐巴
	Sort          field.Int32  // 排序编号
	IsMultipoint  field.Int32  // 多端登录: 0=否, 1=是
	IsDisable     field.Int32  // 是否禁用: 0=否, 1=是
	IsDelete      field.Int32  // 是否删除: 0=否, 1=是
	LastLoginIP   field.String // 最后登录IP
	LastLoginTime field.Int64  // 最后登录
	CreateTime    field.Int64  // 创建时间
	UpdateTime    field.Int64  // 更新时间
	DeleteTime    field.Int64  // 删除时间
	AuthRoles     laSystemAuthAdminHasManyAuthRoles

	fieldMap map[string]field.Expr
}

func (l laSystemAuthAdmin) Table(newTableName string) *laSystemAuthAdmin {
	l.laSystemAuthAdminDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l laSystemAuthAdmin) As(alias string) *laSystemAuthAdmin {
	l.laSystemAuthAdminDo.DO = *(l.laSystemAuthAdminDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *laSystemAuthAdmin) updateTableName(table string) *laSystemAuthAdmin {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Username = field.NewString(table, "username")
	l.Nickname = field.NewString(table, "nickname")
	l.Password = field.NewString(table, "password")
	l.Avatar = field.NewString(table, "avatar")
	l.Role = field.NewField(table, "role")
	l.Salt = field.NewString(table, "salt")
	l.Sort = field.NewInt32(table, "sort")
	l.IsMultipoint = field.NewInt32(table, "is_multipoint")
	l.IsDisable = field.NewInt32(table, "is_disable")
	l.IsDelete = field.NewInt32(table, "is_delete")
	l.LastLoginIP = field.NewString(table, "last_login_ip")
	l.LastLoginTime = field.NewInt64(table, "last_login_time")
	l.CreateTime = field.NewInt64(table, "create_time")
	l.UpdateTime = field.NewInt64(table, "update_time")
	l.DeleteTime = field.NewInt64(table, "delete_time")

	l.fillFieldMap()

	return l
}

func (l *laSystemAuthAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *laSystemAuthAdmin) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 17)
	l.fieldMap["id"] = l.ID
	l.fieldMap["username"] = l.Username
	l.fieldMap["nickname"] = l.Nickname
	l.fieldMap["password"] = l.Password
	l.fieldMap["avatar"] = l.Avatar
	l.fieldMap["role"] = l.Role
	l.fieldMap["salt"] = l.Salt
	l.fieldMap["sort"] = l.Sort
	l.fieldMap["is_multipoint"] = l.IsMultipoint
	l.fieldMap["is_disable"] = l.IsDisable
	l.fieldMap["is_delete"] = l.IsDelete
	l.fieldMap["last_login_ip"] = l.LastLoginIP
	l.fieldMap["last_login_time"] = l.LastLoginTime
	l.fieldMap["create_time"] = l.CreateTime
	l.fieldMap["update_time"] = l.UpdateTime
	l.fieldMap["delete_time"] = l.DeleteTime

}

func (l laSystemAuthAdmin) clone(db *gorm.DB) laSystemAuthAdmin {
	l.laSystemAuthAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l laSystemAuthAdmin) replaceDB(db *gorm.DB) laSystemAuthAdmin {
	l.laSystemAuthAdminDo.ReplaceDB(db)
	return l
}

type laSystemAuthAdminHasManyAuthRoles struct {
	db *gorm.DB

	field.RelationField

	Role struct {
		field.RelationField
	}
}

func (a laSystemAuthAdminHasManyAuthRoles) Where(conds ...field.Expr) *laSystemAuthAdminHasManyAuthRoles {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laSystemAuthAdminHasManyAuthRoles) WithContext(ctx context.Context) *laSystemAuthAdminHasManyAuthRoles {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laSystemAuthAdminHasManyAuthRoles) Model(m *model.LaSystemAuthAdmin) *laSystemAuthAdminHasManyAuthRolesTx {
	return &laSystemAuthAdminHasManyAuthRolesTx{a.db.Model(m).Association(a.Name())}
}

type laSystemAuthAdminHasManyAuthRolesTx struct{ tx *gorm.Association }

func (a laSystemAuthAdminHasManyAuthRolesTx) Find() (result []*model.LaSystemAdminRole, err error) {
	return result, a.tx.Find(&result)
}

func (a laSystemAuthAdminHasManyAuthRolesTx) Append(values ...*model.LaSystemAdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laSystemAuthAdminHasManyAuthRolesTx) Replace(values ...*model.LaSystemAdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laSystemAuthAdminHasManyAuthRolesTx) Delete(values ...*model.LaSystemAdminRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laSystemAuthAdminHasManyAuthRolesTx) Clear() error {
	return a.tx.Clear()
}

func (a laSystemAuthAdminHasManyAuthRolesTx) Count() int64 {
	return a.tx.Count()
}

type laSystemAuthAdminDo struct{ gen.DO }

func (l laSystemAuthAdminDo) Debug() *laSystemAuthAdminDo {
	return l.withDO(l.DO.Debug())
}

func (l laSystemAuthAdminDo) WithContext(ctx context.Context) *laSystemAuthAdminDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l laSystemAuthAdminDo) ReadDB() *laSystemAuthAdminDo {
	return l.Clauses(dbresolver.Read)
}

func (l laSystemAuthAdminDo) WriteDB() *laSystemAuthAdminDo {
	return l.Clauses(dbresolver.Write)
}

func (l laSystemAuthAdminDo) Session(config *gorm.Session) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Session(config))
}

func (l laSystemAuthAdminDo) Clauses(conds ...clause.Expression) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l laSystemAuthAdminDo) Returning(value interface{}, columns ...string) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l laSystemAuthAdminDo) Not(conds ...gen.Condition) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l laSystemAuthAdminDo) Or(conds ...gen.Condition) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l laSystemAuthAdminDo) Select(conds ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l laSystemAuthAdminDo) Where(conds ...gen.Condition) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l laSystemAuthAdminDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *laSystemAuthAdminDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l laSystemAuthAdminDo) Order(conds ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l laSystemAuthAdminDo) Distinct(cols ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l laSystemAuthAdminDo) Omit(cols ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l laSystemAuthAdminDo) Join(table schema.Tabler, on ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l laSystemAuthAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l laSystemAuthAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l laSystemAuthAdminDo) Group(cols ...field.Expr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l laSystemAuthAdminDo) Having(conds ...gen.Condition) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l laSystemAuthAdminDo) Limit(limit int) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l laSystemAuthAdminDo) Offset(offset int) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l laSystemAuthAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l laSystemAuthAdminDo) Unscoped() *laSystemAuthAdminDo {
	return l.withDO(l.DO.Unscoped())
}

func (l laSystemAuthAdminDo) Create(values ...*model.LaSystemAuthAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l laSystemAuthAdminDo) CreateInBatches(values []*model.LaSystemAuthAdmin, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l laSystemAuthAdminDo) Save(values ...*model.LaSystemAuthAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l laSystemAuthAdminDo) First() (*model.LaSystemAuthAdmin, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthAdmin), nil
	}
}

func (l laSystemAuthAdminDo) Take() (*model.LaSystemAuthAdmin, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthAdmin), nil
	}
}

func (l laSystemAuthAdminDo) Last() (*model.LaSystemAuthAdmin, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthAdmin), nil
	}
}

func (l laSystemAuthAdminDo) Find() ([]*model.LaSystemAuthAdmin, error) {
	result, err := l.DO.Find()
	return result.([]*model.LaSystemAuthAdmin), err
}

func (l laSystemAuthAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LaSystemAuthAdmin, err error) {
	buf := make([]*model.LaSystemAuthAdmin, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l laSystemAuthAdminDo) FindInBatches(result *[]*model.LaSystemAuthAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l laSystemAuthAdminDo) Attrs(attrs ...field.AssignExpr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l laSystemAuthAdminDo) Assign(attrs ...field.AssignExpr) *laSystemAuthAdminDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l laSystemAuthAdminDo) Joins(fields ...field.RelationField) *laSystemAuthAdminDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l laSystemAuthAdminDo) Preload(fields ...field.RelationField) *laSystemAuthAdminDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l laSystemAuthAdminDo) FirstOrInit() (*model.LaSystemAuthAdmin, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthAdmin), nil
	}
}

func (l laSystemAuthAdminDo) FirstOrCreate() (*model.LaSystemAuthAdmin, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaSystemAuthAdmin), nil
	}
}

func (l laSystemAuthAdminDo) FindByPage(offset int, limit int) (result []*model.LaSystemAuthAdmin, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l laSystemAuthAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l laSystemAuthAdminDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l laSystemAuthAdminDo) Delete(models ...*model.LaSystemAuthAdmin) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *laSystemAuthAdminDo) withDO(do gen.Dao) *laSystemAuthAdminDo {
	l.DO = *do.(*gen.DO)
	return l
}
