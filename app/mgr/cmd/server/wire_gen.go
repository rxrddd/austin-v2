// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"austin-v2/app/mgr/internal/conf"
	"austin-v2/app/mgr/internal/data"
	"austin-v2/app/mgr/internal/server"
	"austin-v2/app/mgr/internal/service"
	"austin-v2/pkg/transaction"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, bootstrap *conf.Bootstrap, auth *conf.Auth, confService *conf.Service, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	db := data.NewMysqlCmd(confData, logger)
	cmdable := data.NewRedisCmd(confData, logger)
	iTranMgr := transaction.NewTranMgr(db)
	discovery := data.NewDiscovery(registry)
	msgPusherManagerClient := data.NewMsgPusherManagerClient(auth, confService, discovery)
	dataData, cleanup, err := data.NewData(db, cmdable, logger, iTranMgr, msgPusherManagerClient)
	if err != nil {
		return nil, nil, err
	}
	iAdminRepo := data.NewAdminRepo(dataData, logger)
	iMenuRepo := data.NewMenuRepo(dataData, logger)
	iRoleRepo := data.NewRoleRepo(dataData, logger)
	systemService := service.NewSystemService(bootstrap, iAdminRepo, iMenuRepo, iRoleRepo)
	commonService := service.NewCommonService()
	msgPusherManagerRepo := data.NewMsgPusherManagerRepo(dataData, logger)
	gmpPlatformService := service.NewGmpPlatformService(msgPusherManagerRepo)
	httpServer := server.NewHTTPServer(confServer, bootstrap, systemService, commonService, gmpPlatformService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
