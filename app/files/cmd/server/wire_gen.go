// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"austin-v2/app/files/internal/biz"
	"austin-v2/app/files/internal/conf"
	"austin-v2/app/files/internal/data"
	"austin-v2/app/files/internal/server"
	"austin-v2/app/files/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewMysqlCmd(confData, logger)
	cmdable := data.NewRedisCmd(confData, logger)
	ossClient, err := data.NewOssClient(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, db, cmdable, ossClient, logger)
	if err != nil {
		return nil, nil, err
	}
	filesRepo := data.NewFilesRepo(dataData, logger)
	filesUseCase := biz.NewFilesUseCase(filesRepo, logger)
	filesService := service.NewFilesService(filesUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, filesService, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
