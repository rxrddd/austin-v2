// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"austin-v2/app/msgpusher/internal/biz"
	"austin-v2/app/msgpusher/internal/conf"
	"austin-v2/app/msgpusher/internal/data"
	"austin-v2/app/msgpusher/internal/process"
	"austin-v2/app/msgpusher/internal/server"
	"austin-v2/app/msgpusher/internal/service"
	"austin-v2/pkg/utils/mqHelper"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	afterParamCheckAction := process.NewAfterParamCheckAction()
	assembleAction := process.NewAssembleAction()
	preParamCheckAction := process.NewPreParamCheckAction()
	broker := data.NewBroker(confData, logger)
	mqHelperMqHelper := mqHelper.NewMqHelper(broker)
	sendMqAction := process.NewSendMqAction(mqHelperMqHelper, logger)
	businessProcess := process.NewBusinessProcess(afterParamCheckAction, assembleAction, preParamCheckAction, sendMqAction)
	db := data.NewMysqlCmd(confData, logger)
	dataData, cleanup, err := data.NewData(confData, logger, broker, mqHelperMqHelper, db)
	if err != nil {
		return nil, nil, err
	}
	iMessageTemplateRepo := data.NewMessageTemplateRepo(dataData, logger)
	messageTemplateUseCase := biz.NewMessageTemplateUseCase(iMessageTemplateRepo, logger)
	msgPusherUseCase := biz.NewMsgPusherUseCase(logger, businessProcess, messageTemplateUseCase)
	msgPusherService := service.NewMsgPusherService(msgPusherUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, msgPusherService, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
