// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"austin-v2/app/project/admin/internal/conf"
	"austin-v2/app/project/admin/internal/data"
	"austin-v2/app/project/admin/internal/server"
	"austin-v2/app/project/admin/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, debug *conf.Debug, registry *conf.Registry, confData *conf.Data, auth *conf.Auth, confService *conf.Service, logger log.Logger) (*kratos.App, func(), error) {
	cmdable := data.NewRedisCmd(confData, logger)
	discovery := data.NewDiscovery(registry)
	administratorClient := data.NewAdministratorServiceClient(auth, confService, discovery)
	authorizationClient := data.NewAuthorizationServiceClient(auth, confService, discovery)
	filesClient := data.NewFilesServiceClient(auth, confService, discovery)
	msgPusherManagerClient := data.NewMsgPusherManagerClient(auth, confService, discovery)
	dataData, err := data.NewData(logger, cmdable, administratorClient, authorizationClient, filesClient, msgPusherManagerClient)
	if err != nil {
		return nil, nil, err
	}
	administratorRepo := data.NewAdministratorRepo(dataData, logger)
	authorizationRepo := data.NewAuthorizationRepo(dataData, logger)
	filesRepo := data.NewFilesRepo(dataData, logger)
	msgPusherManagerRepo := data.NewMsgPusherManagerRepo(dataData, logger)
	adminInterface := service.NewAdminInterface(administratorRepo, authorizationRepo, filesRepo, msgPusherManagerRepo, logger)
	httpServer := server.NewHTTPServer(confServer, debug, auth, adminInterface, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, debug, httpServer, registrar)
	return app, func() {
	}, nil
}
