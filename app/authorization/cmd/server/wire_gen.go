// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"austin-v2/app/authorization/internal/biz"
	"austin-v2/app/authorization/internal/conf"
	"austin-v2/app/authorization/internal/data"
	"austin-v2/app/authorization/internal/server"
	"austin-v2/app/authorization/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, casbin *conf.Casbin, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewMysqlCmd(confData, logger)
	cmdable := data.NewRedisCmd(confData, logger)
	dataData, cleanup, err := data.NewData(db, cmdable, logger)
	if err != nil {
		return nil, nil, err
	}
	authorizationRepo := data.NewAuthorizationRepo(dataData, casbin, logger)
	authorizationUsecase := biz.NewAuthorizationUsecase(authorizationRepo, logger)
	authorizationService := service.NewAuthorizationService(authorizationUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, authorizationService, logger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
