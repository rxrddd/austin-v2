// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"austin-v2/app/msgpusher-worker/internal/biz"
	"austin-v2/app/msgpusher-worker/internal/conf"
	"austin-v2/app/msgpusher-worker/internal/data"
	"austin-v2/app/msgpusher-worker/internal/sender"
	"austin-v2/app/msgpusher-worker/internal/server"
	"austin-v2/app/msgpusher-worker/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	broker := data.NewBroker(confData, logger)
	taskExecutor := sender.NewTaskExecutor()
	handle := sender.NewHandle(logger, broker)
	cmdable := data.NewRedisCmd(confData, logger)
	discardMessageService := service.NewDiscardMessageService(logger, cmdable)
	shieldService := service.NewShieldService(logger, cmdable)
	db := data.NewMysqlCmd(confData, logger)
	dataData, cleanup, err := data.NewData(confData, logger, broker, cmdable, db)
	if err != nil {
		return nil, nil, err
	}
	iMessageTemplateRepo := data.NewMessageTemplateRepo(dataData, logger)
	messageTemplateUseCase := biz.NewMessageTemplateUseCase(iMessageTemplateRepo, logger)
	deduplicationRuleService := service.NewDeduplicationRuleService(logger, cmdable, messageTemplateUseCase)
	taskService := service.NewTaskService(discardMessageService, shieldService, deduplicationRuleService)
	rabbitmqServer := server.NewMqServer(confData, logger, broker, taskExecutor, handle, taskService)
	app := newApp(logger, rabbitmqServer)
	return app, func() {
		cleanup()
	}, nil
}
